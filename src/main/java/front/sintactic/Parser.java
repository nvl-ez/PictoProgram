
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import nodes.*;
import utils.Types;
import utils.OpComp;
import utils.OpLog;
import utils.OpArit;
import utils.SymbolTable;
import intermediateCode.ThreeAddressCode;
import utils.ErrorHandler;
import utils.ErrorPhase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\004\004\000\002\004\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\010\000\002\011\011\000\002\011\010\000\002\011\010" +
    "\000\002\011\005\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\035\004\000\002\035\002\000\002" +
    "\013\006\000\002\014\005\000\002\014\004\000\002\014" +
    "\005\000\002\005\004\000\002\005\003\000\002\015\007" +
    "\000\002\006\004\000\002\021\004\000\002\020\005\000" +
    "\002\020\004\000\002\020\004\000\002\020\003\000\002" +
    "\017\006\000\002\017\006\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\016\004\000\002\016\002" +
    "\000\002\007\010\000\002\007\004\000\002\023\006\000" +
    "\002\023\003\000\002\022\005\000\002\022\003\000\002" +
    "\022\006\000\002\022\004\000\002\022\002\000\002\025" +
    "\005\000\002\025\003\000\002\025\004\000\002\024\003" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\003\000\002" +
    "\024\005\000\002\027\012\000\002\027\011\000\002\027" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\027\005\000\002\027\015\000\002\027\017\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\030\006\000\002\030\002\000\002\032\007\000\002\032" +
    "\006\000\002\032\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\005\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\033\003\000\002\034" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\012\002\000\005\000\006\000\026\000\001" +
    "\002\000\004\002\305\001\002\000\012\002\ufff8\005\007" +
    "\006\020\026\006\001\002\000\010\003\170\004\217\035" +
    "\303\001\002\000\006\003\266\026\265\001\002\000\032" +
    "\002\ufff5\003\ufff5\005\ufff5\006\ufff5\010\ufff5\011\ufff5\015" +
    "\ufff5\017\ufff5\022\ufff5\023\ufff5\026\ufff5\035\ufff5\001\002" +
    "\000\010\002\uffe3\006\uffe3\026\234\001\002\000\012\002" +
    "\ufffa\005\007\006\020\026\006\001\002\000\012\002\ufff6" +
    "\005\ufff6\006\ufff6\026\ufff6\001\002\000\032\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\010\ufff4\011\ufff4\015\ufff4\017\ufff4" +
    "\022\ufff4\023\ufff4\026\ufff4\035\ufff4\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff9\006\020\001\002\000\032" +
    "\002\ufff3\003\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\015" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\026\ufff3\035\ufff3\001\002" +
    "\000\006\003\021\012\023\001\002\000\004\002\uffd3\001" +
    "\002\000\004\013\024\001\002\000\010\003\uffa5\013\uffa5" +
    "\026\uffa5\001\002\000\004\014\025\001\002\000\026\003" +
    "\037\005\007\010\041\011\027\015\uffd5\017\042\022\036" +
    "\023\035\026\026\035\032\001\002\000\010\003\170\004" +
    "\217\035\167\001\002\000\024\003\037\007\050\012\045" +
    "\024\214\031\051\032\044\033\052\034\055\035\047\001" +
    "\002\000\004\024\212\001\002\000\026\003\037\005\007" +
    "\010\041\011\027\015\uffd5\017\042\022\036\023\035\026" +
    "\026\035\032\001\002\000\012\003\200\004\102\012\100" +
    "\016\202\001\002\000\026\003\uffbe\005\uffbe\010\uffbe\011" +
    "\uffbe\015\uffbe\017\uffbe\022\uffbe\023\uffbe\026\uffbe\035\uffbe" +
    "\001\002\000\026\003\uffbc\005\uffbc\010\uffbc\011\uffbc\015" +
    "\uffbc\017\uffbc\022\uffbc\023\uffbc\026\uffbc\035\uffbc\001\002" +
    "\000\004\012\154\001\002\000\004\012\146\001\002\000" +
    "\016\013\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\001\002\000\004\015\145\001\002\000\004\012\130\001" +
    "\002\000\004\012\043\001\002\000\022\003\037\007\050" +
    "\012\045\031\051\032\044\033\052\034\055\035\047\001" +
    "\002\000\016\013\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\001\002\000\022\003\037\007\050\012\045\031" +
    "\051\032\044\033\052\034\055\035\047\001\002\000\016" +
    "\013\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\001" +
    "\002\000\024\003\077\004\102\012\100\013\uffc2\024\uffc2" +
    "\025\uffc2\027\uffc2\030\uffc2\031\uffc2\001\002\000\004\012" +
    "\075\001\002\000\022\003\037\007\050\012\045\031\051" +
    "\032\044\033\052\034\055\035\047\001\002\000\016\013" +
    "\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\001\002" +
    "\000\004\013\063\001\002\000\016\013\uffca\024\uffca\025" +
    "\uffca\027\060\030\056\031\061\001\002\000\016\013\uffc4" +
    "\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\001\002\000" +
    "\022\003\uffb6\007\uffb6\012\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\001\002\000\022\003\037\007\050\012" +
    "\045\031\051\032\044\033\052\034\055\035\047\001\002" +
    "\000\022\003\uffb5\007\uffb5\012\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\001\002\000\022\003\uffb7\007\uffb7" +
    "\012\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\001" +
    "\002\000\010\013\uffcb\024\uffcb\025\uffcb\001\002\000\004" +
    "\014\064\001\002\000\026\003\037\005\007\010\041\011" +
    "\027\015\uffd5\017\042\022\036\023\035\026\026\035\032" +
    "\001\002\000\004\015\066\001\002\000\030\003\uffb3\005" +
    "\uffb3\010\uffb3\011\uffb3\015\uffb3\017\uffb3\020\070\022\uffb3" +
    "\023\uffb3\026\uffb3\035\uffb3\001\002\000\026\003\uffc0\005" +
    "\uffc0\010\uffc0\011\uffc0\015\uffc0\017\uffc0\022\uffc0\023\uffc0" +
    "\026\uffc0\035\uffc0\001\002\000\004\014\071\001\002\000" +
    "\026\003\037\005\007\010\041\011\027\015\uffd5\017\042" +
    "\022\036\023\035\026\026\035\032\001\002\000\004\015" +
    "\073\001\002\000\026\003\uffb4\005\uffb4\010\uffb4\011\uffb4" +
    "\015\uffb4\017\uffb4\022\uffb4\023\uffb4\026\uffb4\035\uffb4\001" +
    "\002\000\010\013\uffc9\024\uffc9\025\uffc9\001\002\000\004" +
    "\013\076\001\002\000\016\013\uffc1\024\uffc1\025\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\001\002\000\006\032\123\035\122" +
    "\001\002\000\030\003\037\004\113\007\050\012\045\013" +
    "\uffcc\025\uffcc\031\051\032\044\033\052\034\055\035\047" +
    "\001\002\000\016\013\uffc3\024\uffc3\025\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\001\002\000\010\003\104\032\105\035\103" +
    "\001\002\000\024\003\077\004\102\013\uffac\016\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\uffac\001\002\000\024" +
    "\003\077\004\102\013\uffaa\016\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\001\002\000\024\003\077\004\102" +
    "\013\uffae\016\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031" +
    "\uffae\001\002\000\020\013\uffaf\016\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\001\002\000\020\013\uffa6\016" +
    "\uffa6\024\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\001\002" +
    "\000\020\013\uffad\016\uffad\024\uffad\025\uffad\027\uffad\030" +
    "\uffad\031\uffad\001\002\000\006\013\uffcf\025\uffcf\001\002" +
    "\000\006\013\115\025\116\001\002\000\004\035\114\001" +
    "\002\000\006\013\uffcd\025\uffcd\001\002\000\016\013\uffd2" +
    "\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\001\002\000" +
    "\024\003\037\004\120\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\006\013\uffd0\025" +
    "\uffd0\001\002\000\004\035\121\001\002\000\006\013\uffce" +
    "\025\uffce\001\002\000\024\003\077\004\102\013\uffab\016" +
    "\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\001\002" +
    "\000\024\003\077\004\102\013\uffa9\016\uffa9\024\uffa9\025" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\001\002\000\020\013\uffa7" +
    "\016\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\001" +
    "\002\000\020\013\uffa8\016\uffa8\024\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\001\002\000\004\013\127\001\002\000" +
    "\016\013\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\001\002\000\004\035\131\001\002\000\004\025\132\001" +
    "\002\000\022\003\037\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\004\025\134\001" +
    "\002\000\022\003\037\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\004\025\136\001" +
    "\002\000\022\003\037\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\004\025\140\001" +
    "\002\000\022\003\037\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\004\013\142\001" +
    "\002\000\004\024\143\001\002\000\026\003\uffb8\005\uffb8" +
    "\010\uffb8\011\uffb8\015\uffb8\017\uffb8\022\uffb8\023\uffb8\026" +
    "\uffb8\035\uffb8\001\002\000\004\002\uffd4\001\002\000\010" +
    "\002\uffa4\006\uffa4\026\uffa4\001\002\000\022\003\037\007" +
    "\050\012\045\031\051\032\044\033\052\034\055\035\047" +
    "\001\002\000\004\013\150\001\002\000\004\014\151\001" +
    "\002\000\026\003\037\005\007\010\041\011\027\015\uffd5" +
    "\017\042\022\036\023\035\026\026\035\032\001\002\000" +
    "\004\015\153\001\002\000\026\003\uffbf\005\uffbf\010\uffbf" +
    "\011\uffbf\015\uffbf\017\uffbf\022\uffbf\023\uffbf\026\uffbf\035" +
    "\uffbf\001\002\000\004\026\155\001\002\000\006\003\170" +
    "\035\167\001\002\000\022\003\037\007\050\012\045\031" +
    "\051\032\044\033\052\034\055\035\047\001\002\000\004" +
    "\024\160\001\002\000\004\035\161\001\002\000\004\021" +
    "\162\001\002\000\004\013\163\001\002\000\004\014\164" +
    "\001\002\000\026\003\037\005\007\010\041\011\027\015" +
    "\uffd5\017\042\022\036\023\035\026\026\035\032\001\002" +
    "\000\004\015\166\001\002\000\026\003\uffb9\005\uffb9\010" +
    "\uffb9\011\uffb9\015\uffb9\017\uffb9\022\uffb9\023\uffb9\026\uffb9" +
    "\035\uffb9\001\002\000\010\003\172\016\173\024\uffe9\001" +
    "\002\000\004\024\171\001\002\000\046\002\uffeb\003\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015" +
    "\uffeb\017\uffeb\022\uffeb\023\uffeb\026\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\001\002\000\004\024\177\001" +
    "\002\000\022\003\037\007\050\012\045\031\051\032\044" +
    "\033\052\034\055\035\047\001\002\000\004\024\175\001" +
    "\002\000\046\002\uffed\003\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\015\uffed\017\uffed\022\uffed\023" +
    "\uffed\026\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\001\002\000\004\024\uffea\001\002\000\046\002\uffec\003" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\015\uffec\017\uffec\022\uffec\023\uffec\026\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\001\002\000\010\024\210" +
    "\032\123\035\122\001\002\000\004\016\205\001\002\000" +
    "\022\003\037\007\050\012\045\031\051\032\044\033\052" +
    "\034\055\035\047\001\002\000\004\024\204\001\002\000" +
    "\026\003\uffb1\005\uffb1\010\uffb1\011\uffb1\015\uffb1\017\uffb1" +
    "\022\uffb1\023\uffb1\026\uffb1\035\uffb1\001\002\000\022\003" +
    "\037\007\050\012\045\031\051\032\044\033\052\034\055" +
    "\035\047\001\002\000\004\024\207\001\002\000\026\003" +
    "\uffb2\005\uffb2\010\uffb2\011\uffb2\015\uffb2\017\uffb2\022\uffb2" +
    "\023\uffb2\026\uffb2\035\uffb2\001\002\000\026\003\uffb0\005" +
    "\uffb0\010\uffb0\011\uffb0\015\uffb0\017\uffb0\022\uffb0\023\uffb0" +
    "\026\uffb0\035\uffb0\001\002\000\004\015\uffd6\001\002\000" +
    "\026\003\uffbd\005\uffbd\010\uffbd\011\uffbd\015\uffbd\017\uffbd" +
    "\022\uffbd\023\uffbd\026\uffbd\035\uffbd\001\002\000\004\024" +
    "\215\001\002\000\026\003\uffbb\005\uffbb\010\uffbb\011\uffbb" +
    "\015\uffbb\017\uffbb\022\uffbb\023\uffbb\026\uffbb\035\uffbb\001" +
    "\002\000\026\003\uffba\005\uffba\010\uffba\011\uffba\015\uffba" +
    "\017\uffba\022\uffba\023\uffba\026\uffba\035\uffba\001\002\000" +
    "\006\004\224\035\223\001\002\000\006\003\220\032\221" +
    "\001\002\000\004\024\222\001\002\000\006\004\uffe6\035" +
    "\uffe6\001\002\000\006\004\uffe5\035\uffe5\001\002\000\004" +
    "\024\226\001\002\000\004\032\225\001\002\000\006\004" +
    "\uffe7\035\uffe7\001\002\000\032\002\uffe8\003\uffe8\005\uffe8" +
    "\006\uffe8\010\uffe8\011\uffe8\015\uffe8\017\uffe8\022\uffe8\023" +
    "\uffe8\026\uffe8\035\uffe8\001\002\000\004\002\ufffd\001\002" +
    "\000\012\002\ufff7\005\ufff7\006\ufff7\026\ufff7\001\002\000" +
    "\006\002\ufffb\006\020\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\uffff\001\002\000\004\035\236\001\002\000" +
    "\006\002\uffe4\006\uffe4\001\002\000\006\003\243\012\023" +
    "\001\002\000\004\014\240\001\002\000\026\003\037\005" +
    "\007\010\041\011\027\015\uffd5\017\042\022\036\023\035" +
    "\026\026\035\032\001\002\000\004\015\145\001\002\000" +
    "\010\002\uffe2\006\uffe2\026\uffe2\001\002\000\006\013\264" +
    "\014\uffdc\001\002\000\010\003\250\013\247\026\246\001" +
    "\002\000\004\014\uffe0\001\002\000\006\004\217\035\263" +
    "\001\002\000\004\014\uffde\001\002\000\006\013\uffd7\025" +
    "\uffd7\001\002\000\004\035\262\001\002\000\006\013\253" +
    "\025\254\001\002\000\004\014\uffdf\001\002\000\004\026" +
    "\255\001\002\000\006\004\217\035\260\001\002\000\004" +
    "\035\257\001\002\000\006\013\uffda\025\uffda\001\002\000" +
    "\006\013\uffdb\025\uffdb\001\002\000\006\004\224\035\uffe1" +
    "\001\002\000\006\013\uffd8\025\uffd8\001\002\000\006\013" +
    "\uffd9\025\uffd9\001\002\000\004\014\uffdd\001\002\000\004" +
    "\035\270\001\002\000\004\024\267\001\002\000\032\002" +
    "\uffee\003\uffee\005\uffee\006\uffee\010\uffee\011\uffee\015\uffee" +
    "\017\uffee\022\uffee\023\uffee\026\uffee\035\uffee\001\002\000" +
    "\004\016\271\001\002\000\012\031\272\032\275\033\273" +
    "\034\274\001\002\000\004\032\301\001\002\000\004\024" +
    "\300\001\002\000\004\024\277\001\002\000\004\024\276" +
    "\001\002\000\032\002\ufff2\003\ufff2\005\ufff2\006\ufff2\010" +
    "\ufff2\011\ufff2\015\ufff2\017\ufff2\022\ufff2\023\ufff2\026\ufff2" +
    "\035\ufff2\001\002\000\032\002\uffef\003\uffef\005\uffef\006" +
    "\uffef\010\uffef\011\uffef\015\uffef\017\uffef\022\uffef\023\uffef" +
    "\026\uffef\035\uffef\001\002\000\032\002\ufff0\003\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\011\ufff0\015\ufff0\017\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\035\ufff0\001\002\000\004\024\302\001" +
    "\002\000\032\002\ufff1\003\ufff1\005\ufff1\006\ufff1\010\ufff1" +
    "\011\ufff1\015\ufff1\017\ufff1\022\ufff1\023\ufff1\026\ufff1\035" +
    "\ufff1\001\002\000\012\003\304\012\023\016\173\024\uffe9" +
    "\001\002\000\010\013\264\014\uffdc\024\177\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\022\004\011\005\015\007\014\010\012\011\007" +
    "\012\013\013\016\015\010\001\001\000\006\014\215\021" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\234\015\010\001\001\000\020\005\230\007\231\010" +
    "\227\011\007\012\013\013\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\226\001\001\000\002\001\001\000\004\033\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\032\011\007\012\013\013\016" +
    "\016\037\023\027\027\030\032\033\001\001\000\004\014" +
    "\215\001\001\000\010\023\045\024\053\025\212\001\001" +
    "\000\002\001\001\000\022\010\032\011\007\012\013\013" +
    "\016\016\210\023\027\027\030\032\033\001\001\000\004" +
    "\031\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\045\024\053\025\052\001\001\000\002\001\001" +
    "\000\010\023\045\024\053\025\125\001\001\000\002\001" +
    "\001\000\004\031\100\001\001\000\002\001\001\000\010" +
    "\023\045\024\053\025\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\045\024\053\025\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\032\011\007\012\013\013" +
    "\016\016\064\023\027\027\030\032\033\001\001\000\002" +
    "\001\001\000\004\030\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\032\011\007\012\013\013\016" +
    "\016\071\023\027\027\030\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\111\023" +
    "\045\024\053\025\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\107\001\001\000\004\031\106\001" +
    "\001\000\004\031\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\045\024\053\025\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\124" +
    "\001\001\000\004\031\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\045\024\053\025" +
    "\132\001\001\000\002\001\001\000\010\023\045\024\053" +
    "\025\134\001\001\000\002\001\001\000\010\023\045\024" +
    "\053\025\136\001\001\000\002\001\001\000\010\023\045" +
    "\024\053\025\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\045\024\053\025\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\032\011\007\012\013" +
    "\013\016\016\151\023\027\027\030\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\155\001\001" +
    "\000\002\001\001\000\010\023\045\024\053\025\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\032\011" +
    "\007\012\013\013\016\016\164\023\027\027\030\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\045\024\053\025\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\045\024\053\025\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\045\024\053\025\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\236\001\001\000\002\001\001\000\006\020\244\033" +
    "\243\001\001\000\002\001\001\000\022\010\032\011\007" +
    "\012\013\013\016\016\240\023\027\027\030\032\033\001" +
    "\001\000\004\034\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\250\017\251\001\001\000\002\001" +
    "\001\000\004\014\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\255\001\001\000\004\014\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\244\033\243\035" +
    "\173\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private static SymbolTable st;
    public void setSymbolTable(SymbolTable st) {
      this.st = st;
    }

    private static ErrorHandler eh;
    public void setErrorHandler(ErrorHandler eh) {
      this.eh = eh;
    }

    private static ThreeAddressCode tac;
    public void setThreeAddressCode(ThreeAddressCode tac) {
      this.tac = tac;
    }

    private int getLeft(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.left;
    }

    private int getRight(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.right;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PictoProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_PictoProgram start_val = (_PictoProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SetUp ::= 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetUp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PictoProgram ::= SetUp GlobalDeclarations Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, functions, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PictoProgram ::= SetUp GlobalDeclarations MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, null, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PictoProgram ::= SetUp Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, functions, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PictoProgram ::= SetUp MainFunction 
            {
              _PictoProgram RESULT =null;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, null, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PictoProgram ::= SetUp GlobalDeclarations Functions 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PictoProgram ::= SetUp GlobalDeclarations 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PictoProgram ::= SetUp Functions 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PictoProgram ::= SetUp 
            {
              _PictoProgram RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDeclarations ::= GlobalDeclarations Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, globalDeclarations, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDeclarations ::= Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, null, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= ConstDelcaration 
            {
              _Declaration RESULT =null;
		int constDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ConstDeclaration constDeclaration = (_ConstDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(constDeclaration, constDeclarationleft, constDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= VarDeclaration 
            {
              _Declaration RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(varDeclaration, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= ArrDeclaration 
            {
              _Declaration RESULT =null;
		int arrDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ArrDeclaration arrDeclaration = (_ArrDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(arrDeclaration, arrDeclarationleft, arrDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDelcaration ::= Const Type Id Assign Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDelcaration ::= Const Type Id Assign Oparit Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDelcaration ::= Const Type Id Assign BooleanValue Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, booleanValue, typeleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDelcaration ::= Const Type Id Assign Character Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, character, typeleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDelcaration ::= Const error Endline 
            {
              _ConstDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong constant declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclaration ::= Type Id AssignationPart Endline 
            {
              _VarDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignationPartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignationPartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_AssignationPart assignationPart = (_AssignationPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _VarDeclaration(type, id, assignationPart, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclaration ::= Type Id error Endline 
            {
              _VarDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong variable declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclaration ::= Type error Endline 
            {
              _VarDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong variable declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AssignationPart ::= Assign Expression 
            {
              _AssignationPart RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _AssignationPart(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignationPart ::= 
            {
              _AssignationPart RESULT =null;
		 /* Pere. No hay asignación */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArrDeclaration ::= Type DimentionSizes Id Endline 
            {
              _ArrDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ArrDeclaration(type, dimentionSizes, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DimentionSizes ::= DimentionSizes ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(dimentionSizes, decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DimentionSizes ::= ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(null, decimal, decimalleft, decimalright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DimentionSizes ::= ArrayIcon error Endline 
            {
              _DimentionSizes RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong array index declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Functions ::= Function Functions 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, functions, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Functions ::= Function 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, null, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Function ::= Type FunctionHead Lbracket FunctionBody F_OUT 
            {
              _Function RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionHead functionHead = (_FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Function(type, functionHead, functionBody, typeleft, functionHeadright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeDimentions ::= Type DimentionSizes 
            {
              _TypeDimentions RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _TypeDimentions(dimentionSizes, type, typeleft, dimentionSizesright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDimentions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunctionHead ::= Id FunctionArgs 
            {
              _FunctionHead RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionArgs functionArgs = (_FunctionArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionHead(id, functionArgs, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionHead",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunctionArgs ::= F_IN FunctionArgsList Rparen 
            {
              _FunctionArgs RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionArgs(functionArgsList, functionArgsListleft, functionArgsListright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionArgs ::= F_IN Rparen 
            {
              _FunctionArgs RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionArgs ::= error Rparen 
            {
              _FunctionArgs RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionArgs ::= error 
            {
              _FunctionArgs RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunctionArgsList ::= FunctionArgsList Comma Type Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionArgsList ::= FunctionArgsList Comma TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionArgsList ::= Type Id 
            {
              _FunctionArgsList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FunctionArgsList ::= TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionArgsList ::= error 
            {
              _FunctionArgsList RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FunctionBody ::= Instruction FunctionBody 
            {
              _FunctionBody RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Instruction instruction = (_Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionBody(instruction, functionBody, instructionleft, instructionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunctionBody ::= 
            {
              _FunctionBody RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MainFunction ::= Main F_IN Rparen Lbracket FunctionBody F_OUT 
            {
              _MainFunction RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _MainFunction(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MainFunction ::= Main error 
            {
              _MainFunction RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunctionCall ::= Id Lparen FunCallArgs Rparen 
            {
              _FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionCall(id, funCallArgs, idleft, funCallArgsright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunctionCall ::= error 
            {
              _FunctionCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunCallArgs ::= FunCallArgs Comma Expression 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunCallArgs ::= Expression 
            {
              _FunCallArgs RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FunCallArgs ::= FunCallArgs Comma ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCallArgs ::= ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCallArgs ::= 
            {
              _FunCallArgs RESULT =null;
		 /* Pere. asegurar que no devuelve nada */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= Value Operation Expression 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Operation operation = (_Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, operation, expression, valueleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Value 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, valueleft, valueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Oparit Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Value ::= FunctionCall 
            {
              _Value RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Value ::= Lparen Expression Rparen 
            {
              _Value RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Value(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Value ::= Decimal 
            {
              _Value RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Value ::= BooleanValue 
            {
              _Value RESULT =null;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(booleanValue, booleanValueleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Value ::= Character 
            {
              _Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(character, characterleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Value ::= Id Index 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Value ::= Id 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Value ::= Read Lparen Rparen 
            {
              _Value RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Value(readleft, readright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= Opif Lparen Expression Rparen Lbracket FunctionBody Rbracket Else 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Else _else = (_Else)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(expression, functionBody, _else, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= Opwhile Lparen Expression Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, functionBody, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= Declaration 
            {
              _Instruction RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(declaration, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= FunctionCall Endline 
            {
              _Instruction RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= Assignation 
            {
              _Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Assignation assignation = (_Assignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(assignation, assignationleft, assignationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= Return Endline 
            {
              _Instruction RESULT =null;
		RESULT = new _Instruction();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= Return Expression Endline 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruction ::= Opfor Lparen VarDeclaration Expression Endline Id Opinc Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(varDeclaration, expression, id, functionBody, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Instruction ::= Write Lparen Id Comma Expression Comma Expression Comma Expression Comma Expression Rparen Endline 
            {
              _Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expression1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expression1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_Expression expression1 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expression2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expression2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		_Expression expression2 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expression3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expression3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression3 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expression4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Expression expression4 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Instruction(id, expression1, expression2, expression3, expression4, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operation ::= Oparit 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operation ::= Oplog 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operation ::= Opcomp 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Else ::= Opelse Lbracket FunctionBody Rbracket 
            {
              _Else RESULT =null;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Else(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Else ::= 
            {
              _Else RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Assignation ::= Id Index Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, index, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Assignation ::= Id Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Assignation ::= Id error Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation to variable "+id, getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Index ::= ArrayIcon Decimal Index 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, index, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Index ::= ArrayIcon Decimal 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, null, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Index ::= ArrayIcon Id Index 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Index ::= ArrayIcon Id 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, null, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Index ::= error Id 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Index ::= ArrayIcon error 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Index ::= error Decimal 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Index ::= error Id Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Index ::= error Decimal Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Index ::= ArrayIcon error Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // F_IN ::= Lparen 
            {
              Object RESULT =null;
		st.enterBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_IN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F_OUT ::= Rbracket 
            {
              Object RESULT =null;
		st.exitBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_OUT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
