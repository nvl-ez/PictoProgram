
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import nodes.*;
import utils.Types;
import utils.OpComp;
import utils.OpLog;
import utils.OpArit;
import utils.SymbolTable;
import intermediateCode.ThreeAddressCode;
import utils.ErrorHandler;
import utils.ErrorPhase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\004\004\000\002\004\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\010\000\002\011\011\000\002\011\011\000\002\011\010" +
    "\000\002\011\010\000\002\011\005\000\002\012\006\000" +
    "\002\012\006\000\002\012\005\000\002\035\004\000\002" +
    "\035\002\000\002\013\006\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\005\004\000\002\005\003" +
    "\000\002\015\006\000\002\006\004\000\002\021\005\000" +
    "\002\020\005\000\002\020\004\000\002\020\004\000\002" +
    "\020\003\000\002\017\006\000\002\017\006\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\016\004" +
    "\000\002\016\002\000\002\007\010\000\002\007\004\000" +
    "\002\023\006\000\002\023\003\000\002\022\005\000\002" +
    "\022\003\000\002\022\006\000\002\022\004\000\002\022" +
    "\002\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\025\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\003\000\002\024\005\000\002\027" +
    "\012\000\002\027\011\000\002\027\003\000\002\027\004" +
    "\000\002\027\003\000\002\027\004\000\002\027\005\000" +
    "\002\027\015\000\002\027\020\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\030\006\000\002" +
    "\030\002\000\002\032\007\000\002\032\006\000\002\032" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\005" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\033\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\012\002\000\005\000\006\000\026\000\001" +
    "\002\000\004\002\325\001\002\000\012\002\ufff8\005\007" +
    "\006\020\026\006\001\002\000\010\003\202\004\231\047" +
    "\323\001\002\000\006\003\303\026\302\001\002\000\032" +
    "\002\ufff5\003\ufff5\005\ufff5\006\ufff5\010\ufff5\011\ufff5\015" +
    "\ufff5\017\ufff5\022\ufff5\023\ufff5\026\ufff5\047\ufff5\001\002" +
    "\000\010\002\uffe2\006\uffe2\026\255\001\002\000\012\002" +
    "\ufffa\005\007\006\020\026\006\001\002\000\012\002\ufff6" +
    "\005\ufff6\006\ufff6\026\ufff6\001\002\000\032\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\010\ufff4\011\ufff4\015\ufff4\017\ufff4" +
    "\022\ufff4\023\ufff4\026\ufff4\047\ufff4\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff9\006\020\001\002\000\032" +
    "\002\ufff3\003\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\015" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\026\ufff3\047\ufff3\001\002" +
    "\000\006\003\241\012\243\001\002\000\004\014\022\001" +
    "\002\000\026\003\033\005\007\010\037\011\024\015\uffd4" +
    "\017\036\022\034\023\032\026\023\047\027\001\002\000" +
    "\010\003\202\004\231\047\201\001\002\000\026\003\033" +
    "\007\051\012\047\024\226\037\045\040\055\044\044\045" +
    "\053\046\056\047\050\001\002\000\026\003\033\005\007" +
    "\010\037\011\024\015\uffd4\017\036\022\034\023\032\026" +
    "\023\047\027\001\002\000\004\024\223\001\002\000\012" +
    "\003\212\004\114\012\112\016\214\001\002\000\026\003" +
    "\uffbc\005\uffbc\010\uffbc\011\uffbc\015\uffbc\017\uffbc\022\uffbc" +
    "\023\uffbc\026\uffbc\047\uffbc\001\002\000\026\003\uffba\005" +
    "\uffba\010\uffba\011\uffba\015\uffba\017\uffba\022\uffba\023\uffba" +
    "\026\uffba\047\uffba\001\002\000\004\012\166\001\002\000" +
    "\042\013\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\004\012\160" +
    "\001\002\000\004\015\157\001\002\000\004\012\143\001" +
    "\002\000\004\012\040\001\002\000\004\004\041\001\002" +
    "\000\004\047\042\001\002\000\004\025\043\001\002\000" +
    "\024\003\033\007\051\012\047\037\045\040\055\044\044" +
    "\045\053\046\056\047\050\001\002\000\042\013\uffc4\024" +
    "\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\001\002\000\024\003\033\007\051\012\047" +
    "\037\045\040\055\044\044\045\053\046\056\047\050\001" +
    "\002\000\042\013\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002\000\024" +
    "\003\033\007\051\012\047\037\045\040\055\044\044\045" +
    "\053\046\056\047\050\001\002\000\050\003\111\004\114" +
    "\012\112\013\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002\000\004\012" +
    "\107\001\002\000\004\025\077\001\002\000\042\013\uffc3" +
    "\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\001\002\000\042\013\uffca\024\uffca\025" +
    "\uffca\027\064\030\073\031\071\032\074\033\062\034\066" +
    "\035\060\036\075\037\061\040\067\041\072\042\070\043" +
    "\063\001\002\000\024\003\033\007\051\012\047\037\045" +
    "\040\055\044\044\045\053\046\056\047\050\001\002\000" +
    "\042\013\uffc2\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002\000\010\013\uffc9" +
    "\024\uffc9\025\uffc9\001\002\000\024\003\uffaa\007\uffaa\012" +
    "\uffaa\037\uffaa\040\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\001\002\000\024\003\uffb5\007\uffb5\012\uffb5\037\uffb5\040" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\001\002\000\024" +
    "\003\uffae\007\uffae\012\uffae\037\uffae\040\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\001\002\000\024\003\uffb1\007\uffb1" +
    "\012\uffb1\037\uffb1\040\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\001\002\000\024\003\uffb0\007\uffb0\012\uffb0\037\uffb0" +
    "\040\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002\000" +
    "\024\003\033\007\051\012\047\037\045\040\055\044\044" +
    "\045\053\046\056\047\050\001\002\000\024\003\uffad\007" +
    "\uffad\012\uffad\037\uffad\040\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\001\002\000\024\003\uffb4\007\uffb4\012\uffb4\037" +
    "\uffb4\040\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\001\002" +
    "\000\024\003\uffb2\007\uffb2\012\uffb2\037\uffb2\040\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\001\002\000\024\003\uffac" +
    "\007\uffac\012\uffac\037\uffac\040\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\001\002\000\024\003\uffb3\007\uffb3\012\uffb3" +
    "\037\uffb3\040\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\001" +
    "\002\000\024\003\uffaf\007\uffaf\012\uffaf\037\uffaf\040\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\024\003" +
    "\uffab\007\uffab\012\uffab\037\uffab\040\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\001\002\000\024\003\uffa9\007\uffa9\012" +
    "\uffa9\037\uffa9\040\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\001\002\000\010\013\uffc7\024\uffc7\025\uffc7\001\002\000" +
    "\024\003\033\007\051\012\047\037\045\040\055\044\044" +
    "\045\053\046\056\047\050\001\002\000\004\025\101\001" +
    "\002\000\024\003\033\007\051\012\047\037\045\040\055" +
    "\044\044\045\053\046\056\047\050\001\002\000\004\025" +
    "\103\001\002\000\024\003\033\007\051\012\047\037\045" +
    "\040\055\044\044\045\053\046\056\047\050\001\002\000" +
    "\004\013\105\001\002\000\004\024\106\001\002\000\026" +
    "\003\uffb6\005\uffb6\010\uffb6\011\uffb6\015\uffb6\017\uffb6\022" +
    "\uffb6\023\uffb6\026\uffb6\047\uffb6\001\002\000\004\013\110" +
    "\001\002\000\042\013\uffbf\024\uffbf\025\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002\000" +
    "\006\044\135\047\134\001\002\000\032\003\033\004\125" +
    "\007\051\012\047\013\uffcb\025\uffcb\037\045\040\055\044" +
    "\044\045\053\046\056\047\050\001\002\000\042\013\uffc1" +
    "\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\001\002\000\010\003\116\044\117\047" +
    "\115\001\002\000\050\003\111\004\114\013\uffa0\016\uffa0" +
    "\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\001\002\000\050\003\111\004\114\013" +
    "\uff9e\016\uff9e\024\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\001\002\000\050\003\111" +
    "\004\114\013\uffa2\016\uffa2\024\uffa2\025\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\001\002\000" +
    "\044\013\uffa3\016\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\001\002\000\044" +
    "\013\uff9a\016\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\001\002\000\044\013" +
    "\uffa1\016\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\001\002\000\006\013\uffce" +
    "\025\uffce\001\002\000\006\013\127\025\130\001\002\000" +
    "\004\047\126\001\002\000\006\013\uffcc\025\uffcc\001\002" +
    "\000\042\013\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000\026\003" +
    "\033\004\132\007\051\012\047\037\045\040\055\044\044" +
    "\045\053\046\056\047\050\001\002\000\006\013\uffcf\025" +
    "\uffcf\001\002\000\004\047\133\001\002\000\006\013\uffcd" +
    "\025\uffcd\001\002\000\050\003\111\004\114\013\uff9f\016" +
    "\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\001\002\000\050\003\111\004\114" +
    "\013\uff9d\016\uff9d\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\001\002\000\044\013" +
    "\uff9b\016\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\001\002\000\044\013\uff9c" +
    "\016\uff9c\024\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\001\002\000\004\013\141\001" +
    "\002\000\042\013\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000\010" +
    "\013\uffc8\024\uffc8\025\uffc8\001\002\000\024\003\033\007" +
    "\051\012\047\037\045\040\055\044\044\045\053\046\056" +
    "\047\050\001\002\000\004\013\145\001\002\000\004\014" +
    "\146\001\002\000\026\003\033\005\007\010\037\011\024" +
    "\015\uffd4\017\036\022\034\023\032\026\023\047\027\001" +
    "\002\000\004\015\150\001\002\000\030\003\uffa7\005\uffa7" +
    "\010\uffa7\011\uffa7\015\uffa7\017\uffa7\020\152\022\uffa7\023" +
    "\uffa7\026\uffa7\047\uffa7\001\002\000\026\003\uffbe\005\uffbe" +
    "\010\uffbe\011\uffbe\015\uffbe\017\uffbe\022\uffbe\023\uffbe\026" +
    "\uffbe\047\uffbe\001\002\000\004\014\153\001\002\000\026" +
    "\003\033\005\007\010\037\011\024\015\uffd4\017\036\022" +
    "\034\023\032\026\023\047\027\001\002\000\004\015\155" +
    "\001\002\000\026\003\uffa8\005\uffa8\010\uffa8\011\uffa8\015" +
    "\uffa8\017\uffa8\022\uffa8\023\uffa8\026\uffa8\047\uffa8\001\002" +
    "\000\010\002\uffe1\006\uffe1\026\uffe1\001\002\000\010\002" +
    "\uff98\006\uff98\026\uff98\001\002\000\024\003\033\007\051" +
    "\012\047\037\045\040\055\044\044\045\053\046\056\047" +
    "\050\001\002\000\004\013\162\001\002\000\004\014\163" +
    "\001\002\000\026\003\033\005\007\010\037\011\024\015" +
    "\uffd4\017\036\022\034\023\032\026\023\047\027\001\002" +
    "\000\004\015\165\001\002\000\026\003\uffbd\005\uffbd\010" +
    "\uffbd\011\uffbd\015\uffbd\017\uffbd\022\uffbd\023\uffbd\026\uffbd" +
    "\047\uffbd\001\002\000\004\026\167\001\002\000\006\003" +
    "\202\047\201\001\002\000\024\003\033\007\051\012\047" +
    "\037\045\040\055\044\044\045\053\046\056\047\050\001" +
    "\002\000\004\024\172\001\002\000\004\047\173\001\002" +
    "\000\004\021\174\001\002\000\004\013\175\001\002\000" +
    "\004\014\176\001\002\000\026\003\033\005\007\010\037" +
    "\011\024\015\uffd4\017\036\022\034\023\032\026\023\047" +
    "\027\001\002\000\004\015\200\001\002\000\026\003\uffb7" +
    "\005\uffb7\010\uffb7\011\uffb7\015\uffb7\017\uffb7\022\uffb7\023" +
    "\uffb7\026\uffb7\047\uffb7\001\002\000\010\003\204\016\205" +
    "\024\uffe8\001\002\000\004\024\203\001\002\000\050\002" +
    "\uffea\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\015\uffea\017\uffea\022\uffea\023\uffea\026\uffea\037" +
    "\uffea\040\uffea\044\uffea\045\uffea\046\uffea\047\uffea\001\002" +
    "\000\004\024\211\001\002\000\024\003\033\007\051\012" +
    "\047\037\045\040\055\044\044\045\053\046\056\047\050" +
    "\001\002\000\004\024\207\001\002\000\050\002\uffec\003" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\015\uffec\017\uffec\022\uffec\023\uffec\026\uffec\037\uffec\040" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\001\002\000\004" +
    "\024\uffe9\001\002\000\050\002\uffeb\003\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb\017\uffeb" +
    "\022\uffeb\023\uffeb\026\uffeb\037\uffeb\040\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\001\002\000\010\024\222\044\135" +
    "\047\134\001\002\000\004\016\217\001\002\000\024\003" +
    "\033\007\051\012\047\037\045\040\055\044\044\045\053" +
    "\046\056\047\050\001\002\000\004\024\216\001\002\000" +
    "\026\003\uffa5\005\uffa5\010\uffa5\011\uffa5\015\uffa5\017\uffa5" +
    "\022\uffa5\023\uffa5\026\uffa5\047\uffa5\001\002\000\024\003" +
    "\033\007\051\012\047\037\045\040\055\044\044\045\053" +
    "\046\056\047\050\001\002\000\004\024\221\001\002\000" +
    "\026\003\uffa6\005\uffa6\010\uffa6\011\uffa6\015\uffa6\017\uffa6" +
    "\022\uffa6\023\uffa6\026\uffa6\047\uffa6\001\002\000\026\003" +
    "\uffa4\005\uffa4\010\uffa4\011\uffa4\015\uffa4\017\uffa4\022\uffa4" +
    "\023\uffa4\026\uffa4\047\uffa4\001\002\000\026\003\uffbb\005" +
    "\uffbb\010\uffbb\011\uffbb\015\uffbb\017\uffbb\022\uffbb\023\uffbb" +
    "\026\uffbb\047\uffbb\001\002\000\004\015\uffd5\001\002\000" +
    "\004\024\227\001\002\000\026\003\uffb9\005\uffb9\010\uffb9" +
    "\011\uffb9\015\uffb9\017\uffb9\022\uffb9\023\uffb9\026\uffb9\047" +
    "\uffb9\001\002\000\026\003\uffb8\005\uffb8\010\uffb8\011\uffb8" +
    "\015\uffb8\017\uffb8\022\uffb8\023\uffb8\026\uffb8\047\uffb8\001" +
    "\002\000\006\004\236\047\235\001\002\000\006\003\232" +
    "\044\233\001\002\000\004\024\234\001\002\000\006\004" +
    "\uffe5\047\uffe5\001\002\000\006\004\uffe4\047\uffe4\001\002" +
    "\000\004\024\240\001\002\000\004\044\237\001\002\000" +
    "\006\004\uffe6\047\uffe6\001\002\000\032\002\uffe7\003\uffe7" +
    "\005\uffe7\006\uffe7\010\uffe7\011\uffe7\015\uffe7\017\uffe7\022" +
    "\uffe7\023\uffe7\026\uffe7\047\uffe7\001\002\000\004\002\uffd2" +
    "\001\002\000\004\013\244\001\002\000\004\013\uff99\001" +
    "\002\000\004\014\245\001\002\000\026\003\033\005\007" +
    "\010\037\011\024\015\uffd4\017\036\022\034\023\032\026" +
    "\023\047\027\001\002\000\004\015\157\001\002\000\004" +
    "\002\uffd3\001\002\000\004\002\ufffd\001\002\000\012\002" +
    "\ufff7\005\ufff7\006\ufff7\026\ufff7\001\002\000\006\002\ufffb" +
    "\006\020\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\047\257\001\002\000\006\002\uffe3" +
    "\006\uffe3\001\002\000\006\003\260\012\262\001\002\000" +
    "\006\013\301\014\uffdb\001\002\000\004\014\uffdf\001\002" +
    "\000\010\003\265\013\263\026\264\001\002\000\004\014" +
    "\uffdd\001\002\000\006\004\231\047\300\001\002\000\006" +
    "\013\uffd6\025\uffd6\001\002\000\004\047\277\001\002\000" +
    "\006\013\270\025\271\001\002\000\004\014\uffde\001\002" +
    "\000\004\026\272\001\002\000\006\004\231\047\275\001" +
    "\002\000\004\047\274\001\002\000\006\013\uffd9\025\uffd9" +
    "\001\002\000\006\013\uffda\025\uffda\001\002\000\006\004" +
    "\236\047\uffe0\001\002\000\006\013\uffd7\025\uffd7\001\002" +
    "\000\006\013\uffd8\025\uffd8\001\002\000\004\014\uffdc\001" +
    "\002\000\004\047\305\001\002\000\004\024\304\001\002" +
    "\000\032\002\uffed\003\uffed\005\uffed\006\uffed\010\uffed\011" +
    "\uffed\015\uffed\017\uffed\022\uffed\023\uffed\026\uffed\047\uffed" +
    "\001\002\000\004\016\306\001\002\000\014\037\307\040" +
    "\310\044\313\045\312\046\311\001\002\000\004\044\321" +
    "\001\002\000\004\044\317\001\002\000\004\024\316\001" +
    "\002\000\004\024\315\001\002\000\004\024\314\001\002" +
    "\000\032\002\ufff2\003\ufff2\005\ufff2\006\ufff2\010\ufff2\011" +
    "\ufff2\015\ufff2\017\ufff2\022\ufff2\023\ufff2\026\ufff2\047\ufff2" +
    "\001\002\000\032\002\uffef\003\uffef\005\uffef\006\uffef\010" +
    "\uffef\011\uffef\015\uffef\017\uffef\022\uffef\023\uffef\026\uffef" +
    "\047\uffef\001\002\000\032\002\uffee\003\uffee\005\uffee\006" +
    "\uffee\010\uffee\011\uffee\015\uffee\017\uffee\022\uffee\023\uffee" +
    "\026\uffee\047\uffee\001\002\000\004\024\320\001\002\000" +
    "\032\002\ufff0\003\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0" +
    "\015\ufff0\017\ufff0\022\ufff0\023\ufff0\026\ufff0\047\ufff0\001" +
    "\002\000\004\024\322\001\002\000\032\002\ufff1\003\ufff1" +
    "\005\ufff1\006\ufff1\010\ufff1\011\ufff1\015\ufff1\017\ufff1\022" +
    "\ufff1\023\ufff1\026\ufff1\047\ufff1\001\002\000\012\003\324" +
    "\012\262\016\205\024\uffe8\001\002\000\010\013\301\014" +
    "\uffdb\024\211\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\024\004\011\005\015\007\014\010\012\011\007" +
    "\012\013\013\016\015\010\021\020\001\001\000\004\014" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\255\015\010\021\020\001\001\000\022\005\251\007" +
    "\252\010\250\011\007\012\013\013\016\015\010\021\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\247\001\001\000\002\001\001\000\004" +
    "\033\241\001\001\000\002\001\001\000\022\010\027\011" +
    "\007\012\013\013\016\016\034\023\025\027\024\032\030" +
    "\001\001\000\004\014\227\001\001\000\010\023\045\024" +
    "\053\025\224\001\001\000\022\010\027\011\007\012\013" +
    "\013\016\016\223\023\025\027\024\032\030\001\001\000" +
    "\002\001\001\000\004\031\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\045\024\053\025\051\001\001" +
    "\000\002\001\001\000\010\023\045\024\053\025\141\001" +
    "\001\000\002\001\001\000\010\023\045\024\053\025\137" +
    "\001\001\000\004\031\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\064\001\001" +
    "\000\010\023\045\024\053\025\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\045\024\053\025\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\045\024\053\025" +
    "\077\001\001\000\002\001\001\000\010\023\045\024\053" +
    "\025\101\001\001\000\002\001\001\000\010\023\045\024" +
    "\053\025\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\123\023\045\024\053\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\121\001\001\000\004\031\120\001\001\000\004\031\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\045\024" +
    "\053\025\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\136\001\001\000\004\031" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\045\024\053\025\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\027\011\007\012\013\013\016\016" +
    "\146\023\025\027\024\032\030\001\001\000\002\001\001" +
    "\000\004\030\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\027\011\007\012\013\013\016\016\153" +
    "\023\025\027\024\032\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\045\024\053\025\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\027\011\007\012\013\013\016" +
    "\016\163\023\025\027\024\032\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\167\001\001\000\002" +
    "\001\001\000\010\023\045\024\053\025\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\027\011\007\012" +
    "\013\013\016\016\176\023\025\027\024\032\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\045\024\053\025\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\045\024" +
    "\053\025\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\045\024\053\025\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\027\011\007\012\013\013\016" +
    "\016\245\023\025\027\024\032\030\001\001\000\004\034" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\265\017\266\001\001\000\002\001\001\000\004" +
    "\014\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\272\001\001" +
    "\000\004\014\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\260\035\205\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private static SymbolTable st;
    public void setSymbolTable(SymbolTable st) {
      this.st = st;
    }

    private static ErrorHandler eh;
    public void setErrorHandler(ErrorHandler eh) {
      this.eh = eh;
    }

    private static ThreeAddressCode tac;
    public void setThreeAddressCode(ThreeAddressCode tac) {
      this.tac = tac;
    }

    private int getLeft(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.left;
    }

    private int getRight(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.right;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PictoProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_PictoProgram start_val = (_PictoProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SetUp ::= 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetUp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PictoProgram ::= SetUp GlobalDeclarations Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, functions, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PictoProgram ::= SetUp GlobalDeclarations MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, null, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PictoProgram ::= SetUp Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, functions, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PictoProgram ::= SetUp MainFunction 
            {
              _PictoProgram RESULT =null;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, null, mainFunction, 0, 0); RESULT.generate();tac.assemble();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PictoProgram ::= SetUp GlobalDeclarations Functions 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PictoProgram ::= SetUp GlobalDeclarations 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PictoProgram ::= SetUp Functions 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PictoProgram ::= SetUp 
            {
              _PictoProgram RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDeclarations ::= GlobalDeclarations Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, globalDeclarations, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDeclarations ::= Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, null, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= ConstDelcaration 
            {
              _Declaration RESULT =null;
		int constDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ConstDeclaration constDeclaration = (_ConstDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(constDeclaration, constDeclarationleft, constDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= VarDeclaration 
            {
              _Declaration RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(varDeclaration, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= ArrDeclaration 
            {
              _Declaration RESULT =null;
		int arrDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ArrDeclaration arrDeclaration = (_ArrDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(arrDeclaration, arrDeclarationleft, arrDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDelcaration ::= Const Type Id Assign Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDelcaration ::= Const Type Id Assign SUM Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDelcaration ::= Const Type Id Assign SUB Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDelcaration ::= Const Type Id Assign BooleanValue Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, booleanValue, typeleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDelcaration ::= Const Type Id Assign Character Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, character, typeleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDelcaration ::= Const error Endline 
            {
              _ConstDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong constant declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclaration ::= Type Id AssignationPart Endline 
            {
              _VarDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignationPartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignationPartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_AssignationPart assignationPart = (_AssignationPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _VarDeclaration(type, id, assignationPart, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclaration ::= Type Id error Endline 
            {
              _VarDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong variable declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclaration ::= Type error Endline 
            {
              _VarDeclaration RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong variable declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignationPart ::= Assign Expression 
            {
              _AssignationPart RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _AssignationPart(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AssignationPart ::= 
            {
              _AssignationPart RESULT =null;
		 /* Pere. No hay asignación */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArrDeclaration ::= Type DimentionSizes Id Endline 
            {
              _ArrDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ArrDeclaration(type, dimentionSizes, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DimentionSizes ::= DimentionSizes ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(dimentionSizes, decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DimentionSizes ::= ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(null, decimal, decimalleft, decimalright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DimentionSizes ::= ArrayIcon error Endline 
            {
              _DimentionSizes RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong array index declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Functions ::= Function Functions 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, functions, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Functions ::= Function 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, null, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Function ::= FunctionHead Lbracket FunctionBody F_OUT 
            {
              _Function RESULT =null;
		int functionHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionHead functionHead = (_FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Function(functionHead, functionBody, functionHeadleft, functionHeadright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeDimentions ::= Type DimentionSizes 
            {
              _TypeDimentions RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _TypeDimentions(dimentionSizes, type, typeleft, dimentionSizesright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDimentions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunctionHead ::= Type Id FunctionArgs 
            {
              _FunctionHead RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionArgs functionArgs = (_FunctionArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionHead(type, id, functionArgs, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionHead",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionArgs ::= Lparen FunctionArgsList Rparen 
            {
              _FunctionArgs RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionArgs(functionArgsList, functionArgsListleft, functionArgsListright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionArgs ::= Lparen Rparen 
            {
              _FunctionArgs RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionArgs ::= error Rparen 
            {
              _FunctionArgs RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunctionArgs ::= error 
            {
              _FunctionArgs RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionArgsList ::= FunctionArgsList Comma Type Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionArgsList ::= FunctionArgsList Comma TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FunctionArgsList ::= Type Id 
            {
              _FunctionArgsList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionArgsList ::= TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FunctionArgsList ::= error 
            {
              _FunctionArgsList RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function arguments declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunctionBody ::= Instruction FunctionBody 
            {
              _FunctionBody RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Instruction instruction = (_Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionBody(instruction, functionBody, instructionleft, instructionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionBody ::= 
            {
              _FunctionBody RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MainFunction ::= Main F_IN Rparen Lbracket FunctionBody F_OUT 
            {
              _MainFunction RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _MainFunction(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MainFunction ::= Main error 
            {
              _MainFunction RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunctionCall ::= Id Lparen FunCallArgs Rparen 
            {
              _FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionCall(id, funCallArgs, idleft, funCallArgsright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunctionCall ::= error 
            {
              _FunctionCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunCallArgs ::= FunCallArgs Comma Expression 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FunCallArgs ::= Expression 
            {
              _FunCallArgs RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCallArgs ::= FunCallArgs Comma ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCallArgs ::= ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunCallArgs ::= 
            {
              _FunCallArgs RESULT =null;
		 /* Pere. asegurar que no devuelve nada */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Value 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, valueleft, valueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= SUB Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= SUM Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Value Operation Expression 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Operation operation = (_Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, operation, expression, valueleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Value ::= FunctionCall 
            {
              _Value RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Value ::= Lparen Expression Rparen 
            {
              _Value RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Value(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Value ::= Decimal 
            {
              _Value RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Value ::= BooleanValue 
            {
              _Value RESULT =null;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(booleanValue, booleanValueleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Value ::= Character 
            {
              _Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(character, characterleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Value ::= Id Index 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Value ::= Id 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Value ::= Read Lparen Rparen 
            {
              _Value RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Value(readleft, readright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= Opif Lparen Expression Rparen Lbracket FunctionBody Rbracket Else 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Else _else = (_Else)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(expression, functionBody, _else, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= Opwhile Lparen Expression Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, functionBody, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= Declaration 
            {
              _Instruction RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(declaration, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= FunctionCall Endline 
            {
              _Instruction RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= Assignation 
            {
              _Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Assignation assignation = (_Assignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(assignation, assignationleft, assignationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruction ::= Return Endline 
            {
              _Instruction RESULT =null;
		RESULT = new _Instruction();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Instruction ::= Return Expression Endline 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Instruction ::= Opfor Lparen VarDeclaration Expression Endline Id Opinc Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(varDeclaration, expression, id, functionBody, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Instruction ::= Write Lparen ArrayIcon Id Comma Expression Comma Expression Comma Expression Comma Expression Rparen Endline 
            {
              _Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expression1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expression1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_Expression expression1 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expression2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expression2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		_Expression expression2 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expression3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expression3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression3 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expression4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Expression expression4 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Instruction(id, expression1, expression2, expression3, expression4, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operation ::= SUM 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operation ::= SUB 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operation ::= MUL 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operation ::= DIV 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operation ::= MOD 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Operation ::= EQ 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Operation ::= NE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Operation ::= GE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Operation ::= LE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Operation ::= GT 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Operation ::= LT 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Operation ::= AND 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Operation ::= OR 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Else ::= Opelse Lbracket FunctionBody Rbracket 
            {
              _Else RESULT =null;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Else(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Else ::= 
            {
              _Else RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Assignation ::= Id Index Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, index, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Assignation ::= Id Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Assignation ::= Id error Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation to variable "+id, getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Index ::= ArrayIcon Decimal Index 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, index, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Index ::= ArrayIcon Decimal 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, null, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Index ::= ArrayIcon Id Index 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Index ::= ArrayIcon Id 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, null, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Index ::= error Id 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Index ::= ArrayIcon error 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Index ::= error Decimal 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Index ::= error Id Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Index ::= error Decimal Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Index ::= ArrayIcon error Index 
            {
              _Index RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong assignation", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // F_IN ::= Lparen 
            {
              Object RESULT =null;
		st.enterBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_IN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // F_OUT ::= Rbracket 
            {
              Object RESULT =null;
		st.exitBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_OUT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
