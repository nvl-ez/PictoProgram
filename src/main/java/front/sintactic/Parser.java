
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import nodes.*;
import utils.Types;
import utils.OpComp;
import utils.OpLog;
import utils.OpArit;
import utils.SymbolTable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\004\004\000\002\004\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\010\000\002" +
    "\011\011\000\002\011\010\000\002\011\010\000\002\012" +
    "\006\000\002\035\004\000\002\035\002\000\002\013\006" +
    "\000\002\014\005\000\002\014\004\000\002\005\004\000" +
    "\002\005\003\000\002\015\007\000\002\006\004\000\002" +
    "\021\004\000\002\020\005\000\002\020\004\000\002\017" +
    "\006\000\002\017\006\000\002\017\004\000\002\017\004" +
    "\000\002\016\004\000\002\016\002\000\002\007\010\000" +
    "\002\023\006\000\002\022\005\000\002\022\003\000\002" +
    "\022\006\000\002\022\004\000\002\022\002\000\002\025" +
    "\005\000\002\025\003\000\002\025\004\000\002\024\003" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\003\000\002" +
    "\024\006\000\002\027\012\000\002\027\011\000\002\027" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\027\005\000\002\027\015\000\002\027\017\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\030\006\000\002\030\002\000\002\032\006\000\002\032" +
    "\007\000\002\032\004\000\002\032\005\000\002\032\004" +
    "\000\002\033\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\010\005\000\006\000\026\000\001\002\000" +
    "\004\002\256\001\002\000\010\005\007\006\020\026\006" +
    "\001\002\000\006\004\200\035\255\001\002\000\004\026" +
    "\241\001\002\000\030\004\ufff9\005\ufff9\006\ufff9\010\ufff9" +
    "\011\ufff9\015\ufff9\017\ufff9\022\ufff9\023\ufff9\026\ufff9\035" +
    "\ufff9\001\002\000\006\006\uffeb\026\213\001\002\000\010" +
    "\005\007\006\020\026\006\001\002\000\010\005\ufffa\006" +
    "\ufffa\026\ufffa\001\002\000\030\004\ufff8\005\ufff8\006\ufff8" +
    "\010\ufff8\011\ufff8\015\ufff8\017\ufff8\022\ufff8\023\ufff8\026" +
    "\ufff8\035\ufff8\001\002\000\004\002\ufffc\001\002\000\004" +
    "\006\020\001\002\000\030\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\015\ufff7\017\ufff7\022\ufff7\023\ufff7\026\ufff7" +
    "\035\ufff7\001\002\000\004\012\022\001\002\000\004\013" +
    "\023\001\002\000\006\013\uffba\026\uffba\001\002\000\004" +
    "\014\024\001\002\000\026\004\041\005\007\010\037\011" +
    "\026\015\uffe0\017\040\022\035\023\034\026\025\035\031" +
    "\001\002\000\006\004\200\035\156\001\002\000\022\007" +
    "\053\012\050\024\175\031\052\032\046\033\055\034\057" +
    "\035\051\001\002\000\026\004\041\005\007\010\037\011" +
    "\026\015\uffe0\017\040\022\035\023\034\026\025\035\031" +
    "\001\002\000\004\024\172\001\002\000\006\012\102\016" +
    "\164\001\002\000\026\004\uffcb\005\uffcb\010\uffcb\011\uffcb" +
    "\015\uffcb\017\uffcb\022\uffcb\023\uffcb\026\uffcb\035\uffcb\001" +
    "\002\000\026\004\uffc9\005\uffc9\010\uffc9\011\uffc9\015\uffc9" +
    "\017\uffc9\022\uffc9\023\uffc9\026\uffc9\035\uffc9\001\002\000" +
    "\004\012\143\001\002\000\004\012\135\001\002\000\004" +
    "\015\134\001\002\000\004\012\117\001\002\000\004\012" +
    "\045\001\002\000\006\032\043\035\042\001\002\000\026" +
    "\004\uffbb\005\uffbb\010\uffbb\011\uffbb\015\uffbb\017\uffbb\022" +
    "\uffbb\023\uffbb\026\uffbb\035\uffbb\001\002\000\026\004\uffbd" +
    "\005\uffbd\010\uffbd\011\uffbd\015\uffbd\017\uffbd\022\uffbd\023" +
    "\uffbd\026\uffbd\035\uffbd\001\002\000\026\004\uffbc\005\uffbc" +
    "\010\uffbc\011\uffbc\015\uffbc\017\uffbc\022\uffbc\023\uffbc\026" +
    "\uffbc\035\uffbc\001\002\000\020\007\053\012\050\031\052" +
    "\032\046\033\055\034\057\035\051\001\002\000\016\013" +
    "\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\031\uffd3\001\002" +
    "\000\016\013\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\001\002\000\020\007\053\012\050\031\052\032\046" +
    "\033\055\034\057\035\051\001\002\000\020\012\102\013" +
    "\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\001\002" +
    "\000\020\007\053\012\050\031\052\032\046\033\055\034" +
    "\057\035\051\001\002\000\004\012\076\001\002\000\004" +
    "\013\065\001\002\000\016\013\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\001\002\000\016\013\uffd7\024\uffd7" +
    "\025\uffd7\027\062\030\060\031\063\001\002\000\016\013" +
    "\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\001\002" +
    "\000\020\007\uffc3\012\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\001\002\000\020\007\053\012\050\031\052" +
    "\032\046\033\055\034\057\035\051\001\002\000\020\007" +
    "\uffc2\012\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\001\002\000\020\007\uffc4\012\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\001\002\000\010\013\uffd8\024\uffd8" +
    "\025\uffd8\001\002\000\004\014\066\001\002\000\026\004" +
    "\041\005\007\010\037\011\026\015\uffe0\017\040\022\035" +
    "\023\034\026\025\035\031\001\002\000\004\015\070\001" +
    "\002\000\030\004\uffc0\005\uffc0\010\uffc0\011\uffc0\015\uffc0" +
    "\017\uffc0\020\072\022\uffc0\023\uffc0\026\uffc0\035\uffc0\001" +
    "\002\000\026\004\uffcd\005\uffcd\010\uffcd\011\uffcd\015\uffcd" +
    "\017\uffcd\022\uffcd\023\uffcd\026\uffcd\035\uffcd\001\002\000" +
    "\004\014\073\001\002\000\026\004\041\005\007\010\037" +
    "\011\026\015\uffe0\017\040\022\035\023\034\026\025\035" +
    "\031\001\002\000\004\015\075\001\002\000\026\004\uffc1" +
    "\005\uffc1\010\uffc1\011\uffc1\015\uffc1\017\uffc1\022\uffc1\023" +
    "\uffc1\026\uffc1\035\uffc1\001\002\000\004\013\077\001\002" +
    "\000\004\024\100\001\002\000\016\013\uffce\024\uffce\025" +
    "\uffce\027\uffce\030\uffce\031\uffce\001\002\000\010\013\uffd6" +
    "\024\uffd6\025\uffd6\001\002\000\026\004\106\007\053\012" +
    "\050\013\uffd9\025\uffd9\031\052\032\046\033\055\034\057" +
    "\035\051\001\002\000\016\013\uffd0\024\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\001\002\000\006\013\uffdc\025\uffdc" +
    "\001\002\000\006\013\110\025\111\001\002\000\004\035" +
    "\107\001\002\000\006\013\uffda\025\uffda\001\002\000\016" +
    "\013\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\001" +
    "\002\000\022\004\113\007\053\012\050\031\052\032\046" +
    "\033\055\034\057\035\051\001\002\000\006\013\uffdd\025" +
    "\uffdd\001\002\000\004\035\114\001\002\000\006\013\uffdb" +
    "\025\uffdb\001\002\000\004\013\116\001\002\000\016\013" +
    "\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\001\002" +
    "\000\004\035\120\001\002\000\004\025\121\001\002\000" +
    "\020\007\053\012\050\031\052\032\046\033\055\034\057" +
    "\035\051\001\002\000\004\025\123\001\002\000\020\007" +
    "\053\012\050\031\052\032\046\033\055\034\057\035\051" +
    "\001\002\000\004\025\125\001\002\000\020\007\053\012" +
    "\050\031\052\032\046\033\055\034\057\035\051\001\002" +
    "\000\004\025\127\001\002\000\020\007\053\012\050\031" +
    "\052\032\046\033\055\034\057\035\051\001\002\000\004" +
    "\013\131\001\002\000\004\024\132\001\002\000\026\004" +
    "\uffc5\005\uffc5\010\uffc5\011\uffc5\015\uffc5\017\uffc5\022\uffc5" +
    "\023\uffc5\026\uffc5\035\uffc5\001\002\000\004\002\uffdf\001" +
    "\002\000\010\002\uffb9\006\uffb9\026\uffb9\001\002\000\020" +
    "\007\053\012\050\031\052\032\046\033\055\034\057\035" +
    "\051\001\002\000\004\013\137\001\002\000\004\014\140" +
    "\001\002\000\026\004\041\005\007\010\037\011\026\015" +
    "\uffe0\017\040\022\035\023\034\026\025\035\031\001\002" +
    "\000\004\015\142\001\002\000\026\004\uffcc\005\uffcc\010" +
    "\uffcc\011\uffcc\015\uffcc\017\uffcc\022\uffcc\023\uffcc\026\uffcc" +
    "\035\uffcc\001\002\000\004\026\144\001\002\000\004\035" +
    "\156\001\002\000\020\007\053\012\050\031\052\032\046" +
    "\033\055\034\057\035\051\001\002\000\004\024\147\001" +
    "\002\000\004\035\150\001\002\000\004\021\151\001\002" +
    "\000\004\013\152\001\002\000\004\014\153\001\002\000" +
    "\026\004\041\005\007\010\037\011\026\015\uffe0\017\040" +
    "\022\035\023\034\026\025\035\031\001\002\000\004\015" +
    "\155\001\002\000\026\004\uffc6\005\uffc6\010\uffc6\011\uffc6" +
    "\015\uffc6\017\uffc6\022\uffc6\023\uffc6\026\uffc6\035\uffc6\001" +
    "\002\000\006\016\160\024\ufff0\001\002\000\004\024\162" +
    "\001\002\000\020\007\053\012\050\031\052\032\046\033" +
    "\055\034\057\035\051\001\002\000\004\024\ufff1\001\002" +
    "\000\044\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\015\ufff2\017\ufff2\022\ufff2\023\ufff2\026\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\001\002\000" +
    "\004\016\167\001\002\000\020\007\053\012\050\031\052" +
    "\032\046\033\055\034\057\035\051\001\002\000\004\024" +
    "\166\001\002\000\026\004\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\015\uffbf\017\uffbf\022\uffbf\023\uffbf\026\uffbf\035\uffbf\001" +
    "\002\000\020\007\053\012\050\031\052\032\046\033\055" +
    "\034\057\035\051\001\002\000\004\024\171\001\002\000" +
    "\026\004\uffbe\005\uffbe\010\uffbe\011\uffbe\015\uffbe\017\uffbe" +
    "\022\uffbe\023\uffbe\026\uffbe\035\uffbe\001\002\000\026\004" +
    "\uffca\005\uffca\010\uffca\011\uffca\015\uffca\017\uffca\022\uffca" +
    "\023\uffca\026\uffca\035\uffca\001\002\000\004\015\uffe1\001" +
    "\002\000\004\024\176\001\002\000\026\004\uffc8\005\uffc8" +
    "\010\uffc8\011\uffc8\015\uffc8\017\uffc8\022\uffc8\023\uffc8\026" +
    "\uffc8\035\uffc8\001\002\000\026\004\uffc7\005\uffc7\010\uffc7" +
    "\011\uffc7\015\uffc7\017\uffc7\022\uffc7\023\uffc7\026\uffc7\035" +
    "\uffc7\001\002\000\006\004\203\035\202\001\002\000\004" +
    "\032\201\001\002\000\006\004\uffed\035\uffed\001\002\000" +
    "\004\024\205\001\002\000\004\032\204\001\002\000\006" +
    "\004\uffee\035\uffee\001\002\000\030\004\uffef\005\uffef\006" +
    "\uffef\010\uffef\011\uffef\015\uffef\017\uffef\022\uffef\023\uffef" +
    "\026\uffef\035\uffef\001\002\000\004\002\ufffd\001\002\000" +
    "\010\005\ufffb\006\ufffb\026\ufffb\001\002\000\004\006\020" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\004\035\215\001\002\000\004\006\uffec\001\002" +
    "\000\004\012\022\001\002\000\004\014\217\001\002\000" +
    "\026\004\041\005\007\010\037\011\026\015\uffe0\017\040" +
    "\022\035\023\034\026\025\035\031\001\002\000\004\015" +
    "\134\001\002\000\006\006\uffea\026\uffea\001\002\000\006" +
    "\013\224\026\225\001\002\000\004\014\uffe8\001\002\000" +
    "\004\014\uffe6\001\002\000\006\004\200\035\240\001\002" +
    "\000\004\035\237\001\002\000\006\013\230\025\231\001" +
    "\002\000\004\014\uffe7\001\002\000\004\026\232\001\002" +
    "\000\006\004\200\035\235\001\002\000\004\035\234\001" +
    "\002\000\006\013\uffe4\025\uffe4\001\002\000\006\013\uffe5" +
    "\025\uffe5\001\002\000\006\004\203\035\uffe9\001\002\000" +
    "\006\013\uffe2\025\uffe2\001\002\000\006\013\uffe3\025\uffe3" +
    "\001\002\000\004\035\242\001\002\000\004\016\243\001" +
    "\002\000\012\031\246\032\247\033\244\034\245\001\002" +
    "\000\004\024\254\001\002\000\004\024\253\001\002\000" +
    "\004\032\251\001\002\000\004\024\250\001\002\000\030" +
    "\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\015\ufff6\017" +
    "\ufff6\022\ufff6\023\ufff6\026\ufff6\035\ufff6\001\002\000\004" +
    "\024\252\001\002\000\030\004\ufff5\005\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\015\ufff5\017\ufff5\022\ufff5\023\ufff5\026\ufff5" +
    "\035\ufff5\001\002\000\030\004\ufff3\005\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\015\ufff3\017\ufff3\022\ufff3\023\ufff3\026\ufff3" +
    "\035\ufff3\001\002\000\030\004\ufff4\005\ufff4\006\ufff4\010" +
    "\ufff4\011\ufff4\015\ufff4\017\ufff4\022\ufff4\023\ufff4\026\ufff4" +
    "\035\ufff4\001\002\000\010\012\022\016\160\024\ufff0\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\022\004\011\005\015\007\014\010\012\011\007" +
    "\012\013\013\016\015\010\001\001\000\006\014\176\021" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\213\015\010\001\001\000\020\005\207\007\210\010" +
    "\206\011\007\012\013\013\016\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\205\001\001\000\002\001\001\000\004\033\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\031\011\007\012\013\013\016\016\035\023\027" +
    "\027\026\032\032\001\001\000\004\014\176\001\001\000" +
    "\010\023\046\024\055\025\173\001\001\000\022\010\031" +
    "\011\007\012\013\013\016\016\172\023\027\027\026\032" +
    "\032\001\001\000\002\001\001\000\004\031\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\046" +
    "\024\055\025\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\046\024\055\025\114\001\001\000\004" +
    "\031\102\001\001\000\010\023\046\024\055\025\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\046\024\055\025\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\031\011\007\012\013\013\016\016\066" +
    "\023\027\027\026\032\032\001\001\000\002\001\001\000" +
    "\004\030\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\031\011\007\012\013\013\016\016\073\023" +
    "\027\027\026\032\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\104\023\046\024\055" +
    "\025\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\046\024\055\025\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\046\024\055\025\121\001\001\000\002" +
    "\001\001\000\010\023\046\024\055\025\123\001\001\000" +
    "\002\001\001\000\010\023\046\024\055\025\125\001\001" +
    "\000\002\001\001\000\010\023\046\024\055\025\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\046\024" +
    "\055\025\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\031\011\007\012\013\013\016\016\140\023" +
    "\027\027\026\032\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\144\001\001\000\002\001\001\000" +
    "\010\023\046\024\055\025\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\031\011\007\012\013\013\016" +
    "\016\153\023\027\027\026\032\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\156\001\001\000\002" +
    "\001\001\000\010\023\046\024\055\025\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\046\024\055\025\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\046\024\055\025\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\215\001\001\000\002\001\001\000\006\020" +
    "\222\033\221\001\001\000\002\001\001\000\022\010\031" +
    "\011\007\012\013\013\016\016\217\023\027\027\026\032" +
    "\032\001\001\000\004\034\220\001\001\000\002\001\001" +
    "\000\006\006\225\017\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\232\001" +
    "\001\000\004\014\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\222\033\221\035\156\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    private static SymbolTable st;
    public Parser(SymbolTable st) {
      this.st = st;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PictoProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_PictoProgram start_val = (_PictoProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SetUp ::= 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetUp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PictoProgram ::= SetUp GlobalDeclarations Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, functions, mainFunction, 0, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PictoProgram ::= SetUp GlobalDeclarations MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, null, mainFunction, 0, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PictoProgram ::= SetUp Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, functions, mainFunction, 0, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PictoProgram ::= SetUp MainFunction 
            {
              _PictoProgram RESULT =null;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, null, mainFunction, 0, 0);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclarations ::= GlobalDeclarations Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, globalDeclarations, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclarations ::= Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, null, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= ConstDelcaration 
            {
              _Declaration RESULT =null;
		int constDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ConstDeclaration constDeclaration = (_ConstDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(constDeclaration, constDeclarationleft, constDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= VarDeclaration 
            {
              _Declaration RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(varDeclaration, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= ArrDeclaration 
            {
              _Declaration RESULT =null;
		int arrDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ArrDeclaration arrDeclaration = (_ArrDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(arrDeclaration, arrDeclarationleft, arrDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDelcaration ::= Const Type Id Assign Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDelcaration ::= Const Type Id Assign Oparit Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDelcaration ::= Const Type Id Assign BooleanValue Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, booleanValue, typeleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDelcaration ::= Const Type Id Assign Character Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, character, typeleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclaration ::= Type Id AssignationPart Endline 
            {
              _VarDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignationPartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignationPartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_AssignationPart assignationPart = (_AssignationPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _VarDeclaration(type, id, assignationPart, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AssignationPart ::= Assign Expression 
            {
              _AssignationPart RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _AssignationPart(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AssignationPart ::= 
            {
              _AssignationPart RESULT =null;
		 /* Pere. No hay asignación */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArrDeclaration ::= Type DimentionSizes Id Endline 
            {
              _ArrDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ArrDeclaration(type, dimentionSizes, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DimentionSizes ::= DimentionSizes ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(dimentionSizes, decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DimentionSizes ::= ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(null, decimal, decimalleft, decimalright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Functions ::= Function Functions 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, functions, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Functions ::= Function 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, null, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Function ::= Type FunctionHead Lbracket FunctionBody F_OUT 
            {
              _Function RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionHead functionHead = (_FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Function(type, functionHead, functionBody, typeleft, functionHeadright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TypeDimentions ::= Type DimentionSizes 
            {
              _TypeDimentions RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _TypeDimentions(dimentionSizes, type, typeleft, dimentionSizesright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDimentions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionHead ::= Id FunctionArgs 
            {
              _FunctionHead RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionArgs functionArgs = (_FunctionArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionHead(id, functionArgs, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionHead",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunctionArgs ::= F_IN FunctionArgsList Rparen 
            {
              _FunctionArgs RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionArgs(functionArgsList, functionArgsListleft, functionArgsListright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionArgs ::= F_IN Rparen 
            {
              _FunctionArgs RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionArgsList ::= FunctionArgsList Comma Type Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunctionArgsList ::= FunctionArgsList Comma TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunctionArgsList ::= Type Id 
            {
              _FunctionArgsList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionArgsList ::= TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FunctionBody ::= Instruction FunctionBody 
            {
              _FunctionBody RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Instruction instruction = (_Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionBody(instruction, functionBody, instructionleft, instructionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunctionBody ::= 
            {
              _FunctionBody RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MainFunction ::= Main F_IN Rparen Lbracket FunctionBody F_OUT 
            {
              _MainFunction RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _MainFunction(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionCall ::= Id Lparen FunCallArgs Rparen 
            {
              _FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionCall(id, funCallArgs, idleft, funCallArgsright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunCallArgs ::= FunCallArgs Comma Expression 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunCallArgs ::= Expression 
            {
              _FunCallArgs RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunCallArgs ::= FunCallArgs Comma ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunCallArgs ::= ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunCallArgs ::= 
            {
              _FunCallArgs RESULT =null;
		 /* Pere. asegurar que no devuelve nada */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Value Operation Expression 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Operation operation = (_Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, operation, expression, valueleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Value 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, valueleft, valueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Oparit Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Value ::= FunctionCall 
            {
              _Value RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Value ::= Lparen Expression Rparen 
            {
              _Value RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Value(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Value ::= Decimal 
            {
              _Value RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Value ::= BooleanValue 
            {
              _Value RESULT =null;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(booleanValue, booleanValueleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Value ::= Character 
            {
              _Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(character, characterleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Value ::= Id Index 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Value ::= Id 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Value ::= Read Lparen Rparen Endline 
            {
              _Value RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new _Value(readleft, readright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instruction ::= Opif Lparen Expression Rparen Lbracket FunctionBody Rbracket Else 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Else _else = (_Else)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(expression, functionBody, _else, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instruction ::= Opwhile Lparen Expression Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, functionBody, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruction ::= Declaration 
            {
              _Instruction RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(declaration, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruction ::= FunctionCall Endline 
            {
              _Instruction RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruction ::= Assignation 
            {
              _Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Assignation assignation = (_Assignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(assignation, assignationleft, assignationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruction ::= Return Endline 
            {
              _Instruction RESULT =null;
		RESULT = new _Instruction();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruction ::= Return Expression Endline 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruction ::= Opfor Lparen VarDeclaration Expression Endline Id Opinc Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(varDeclaration, expression, id, functionBody, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruction ::= Write Lparen Id Comma Expression Comma Expression Comma Expression Comma Expression Rparen Endline 
            {
              _Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expression1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expression1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_Expression expression1 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expression2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expression2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		_Expression expression2 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expression3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expression3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression3 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expression4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Expression expression4 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Instruction(id, expression1, expression2, expression3, expression4, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Operation ::= Oparit 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Operation ::= Oplog 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Operation ::= Opcomp 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Else ::= Opelse Lbracket FunctionBody Rbracket 
            {
              _Else RESULT =null;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Else(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Else ::= 
            {
              _Else RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Assignation ::= Id Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Assignation ::= Id Index Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, index, expression, idleft, idright);}
                    ;

Index               ::= ArrayIcon Decimal:decimal Index:index                                                       {:RESULT = new _Index(decimal, index, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Assignation ::= ArrayIcon Decimal 
            {
              _Assignation RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, null, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Assignation ::= ArrayIcon Id Index 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Assignation ::= ArrayIcon Id 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, null, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // F_IN ::= Lparen 
            {
              Object RESULT =null;
		st.enterBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_IN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F_OUT ::= Rbracket 
            {
              Object RESULT =null;
		st.exitBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_OUT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
