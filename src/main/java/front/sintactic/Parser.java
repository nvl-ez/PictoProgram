
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package front.sintactic;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.HashMap;
import nodes.*;
import utils.Types;
import utils.OpComp;
import utils.OpLog;
import utils.OpArit;
import utils.SymbolTable;
import intermediateCode.ThreeAddressCode;
import utils.ErrorHandler;
import utils.ErrorPhase;
import optimizer.Optimizer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\010\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\011\010\000" +
    "\002\012\006\000\002\035\004\000\002\035\002\000\002" +
    "\013\006\000\002\014\005\000\002\014\004\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\015\006" +
    "\000\002\006\004\000\002\021\005\000\002\021\004\000" +
    "\002\020\005\000\002\020\004\000\002\017\006\000\002" +
    "\017\006\000\002\017\004\000\002\017\004\000\002\016" +
    "\004\000\002\016\002\000\002\007\010\000\002\007\005" +
    "\000\002\023\006\000\002\022\005\000\002\022\003\000" +
    "\002\022\006\000\002\022\004\000\002\022\002\000\002" +
    "\025\003\000\002\025\004\000\002\025\004\000\002\025" +
    "\005\000\002\024\003\000\002\024\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\004\000\002\024\005\000\002\027\012\000\002" +
    "\027\011\000\002\027\003\000\002\027\004\000\002\027" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\015" +
    "\000\002\027\020\000\002\027\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\006\000" +
    "\002\030\002\000\002\032\007\000\002\032\006\000\002" +
    "\031\005\000\002\031\004\000\002\031\005\000\002\031" +
    "\004\000\002\033\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\014\002\000\003\000\005\000\006\000\026" +
    "\000\001\002\000\004\002\307\001\002\000\014\002\ufff8" +
    "\003\021\005\007\006\020\026\006\001\002\000\006\004" +
    "\216\047\306\001\002\000\004\026\267\001\002\000\032" +
    "\002\ufff3\003\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\015" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\026\ufff3\047\ufff3\001\002" +
    "\000\012\002\uffe4\003\243\006\uffe4\026\245\001\002\000" +
    "\014\002\ufffa\003\243\005\007\006\020\026\006\001\002" +
    "\000\014\002\ufff5\003\ufff5\005\ufff5\006\ufff5\026\ufff5\001" +
    "\002\000\032\002\ufff2\003\ufff2\005\ufff2\006\ufff2\010\ufff2" +
    "\011\ufff2\015\ufff2\017\ufff2\022\ufff2\023\ufff2\026\ufff2\047" +
    "\ufff2\001\002\000\004\002\ufffc\001\002\000\006\002\ufff9" +
    "\006\020\001\002\000\032\002\ufff1\003\ufff1\005\ufff1\006" +
    "\ufff1\010\ufff1\011\ufff1\015\ufff1\017\ufff1\022\ufff1\023\ufff1" +
    "\026\ufff1\047\ufff1\001\002\000\006\003\227\012\231\001" +
    "\002\000\010\002\ufff7\015\226\024\225\001\002\000\004" +
    "\014\023\001\002\000\026\003\035\005\007\010\037\011" +
    "\025\015\uffd7\017\040\022\034\023\033\026\024\047\030" +
    "\001\002\000\006\004\216\047\174\001\002\000\024\007" +
    "\047\012\045\024\213\037\043\040\052\044\042\045\051" +
    "\046\054\047\046\001\002\000\004\024\211\001\002\000" +
    "\026\003\035\005\007\010\037\011\025\015\uffd7\017\040" +
    "\022\034\023\033\026\024\047\030\001\002\000\010\004" +
    "\112\012\110\016\202\001\002\000\026\003\uffc0\005\uffc0" +
    "\010\uffc0\011\uffc0\015\uffc0\017\uffc0\022\uffc0\023\uffc0\026" +
    "\uffc0\047\uffc0\001\002\000\026\003\uffbe\005\uffbe\010\uffbe" +
    "\011\uffbe\015\uffbe\017\uffbe\022\uffbe\023\uffbe\026\uffbe\047" +
    "\uffbe\001\002\000\004\012\161\001\002\000\004\012\153" +
    "\001\002\000\004\024\152\001\002\000\004\015\151\001" +
    "\002\000\004\012\133\001\002\000\004\012\041\001\002" +
    "\000\022\007\047\012\045\037\043\040\052\044\042\045" +
    "\051\046\054\047\046\001\002\000\042\013\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\001\002\000\022\007\047\012\045\037\043\040" +
    "\052\044\042\045\051\046\054\047\046\001\002\000\042" +
    "\013\uffca\024\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\001\002\000\022\007\047\012" +
    "\045\037\043\040\052\044\042\045\051\046\054\047\046" +
    "\001\002\000\046\004\112\012\110\013\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\001\002\000\004\012\106\001\002\000\004\013\075" +
    "\001\002\000\042\013\uffc7\024\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000" +
    "\022\007\047\012\045\037\043\040\052\044\042\045\051" +
    "\046\054\047\046\001\002\000\042\013\uffce\024\uffce\025" +
    "\uffce\027\061\030\070\031\066\032\071\033\057\034\063" +
    "\035\055\036\072\037\056\040\064\041\067\042\065\043" +
    "\060\001\002\000\042\013\uffc6\024\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002" +
    "\000\022\007\uffad\012\uffad\037\uffad\040\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\001\002\000\022\007\uffb8\012\uffb8" +
    "\037\uffb8\040\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\001" +
    "\002\000\022\007\uffb1\012\uffb1\037\uffb1\040\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\001\002\000\022\007\uffb4\012" +
    "\uffb4\037\uffb4\040\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\001\002\000\022\007\uffb3\012\uffb3\037\uffb3\040\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\001\002\000\022\007\047" +
    "\012\045\037\043\040\052\044\042\045\051\046\054\047" +
    "\046\001\002\000\022\007\uffb0\012\uffb0\037\uffb0\040\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002\000\022\007" +
    "\uffb7\012\uffb7\037\uffb7\040\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\001\002\000\022\007\uffb5\012\uffb5\037\uffb5\040" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\001\002\000\022" +
    "\007\uffaf\012\uffaf\037\uffaf\040\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\001\002\000\022\007\uffb6\012\uffb6\037\uffb6" +
    "\040\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\001\002\000" +
    "\022\007\uffb2\012\uffb2\037\uffb2\040\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\001\002\000\022\007\uffae\012\uffae\037" +
    "\uffae\040\uffae\044\uffae\045\uffae\046\uffae\047\uffae\001\002" +
    "\000\022\007\uffac\012\uffac\037\uffac\040\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\001\002\000\010\013\uffcb\024\uffcb" +
    "\025\uffcb\001\002\000\010\013\uffcd\024\uffcd\025\uffcd\001" +
    "\002\000\004\014\076\001\002\000\026\003\035\005\007" +
    "\010\037\011\025\015\uffd7\017\040\022\034\023\033\026" +
    "\024\047\030\001\002\000\004\015\100\001\002\000\030" +
    "\003\uffaa\005\uffaa\010\uffaa\011\uffaa\015\uffaa\017\uffaa\020" +
    "\102\022\uffaa\023\uffaa\026\uffaa\047\uffaa\001\002\000\026" +
    "\003\uffc2\005\uffc2\010\uffc2\011\uffc2\015\uffc2\017\uffc2\022" +
    "\uffc2\023\uffc2\026\uffc2\047\uffc2\001\002\000\004\014\103" +
    "\001\002\000\026\003\035\005\007\010\037\011\025\015" +
    "\uffd7\017\040\022\034\023\033\026\024\047\030\001\002" +
    "\000\004\015\105\001\002\000\026\003\uffab\005\uffab\010" +
    "\uffab\011\uffab\015\uffab\017\uffab\022\uffab\023\uffab\026\uffab" +
    "\047\uffab\001\002\000\004\013\107\001\002\000\042\013" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\001\002\000\030\004\121\007\047" +
    "\012\045\013\uffcf\025\uffcf\037\043\040\052\044\042\045" +
    "\051\046\054\047\046\001\002\000\042\013\uffc4\024\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\001\002\000\006\044\114\047\113\001\002\000" +
    "\046\004\112\013\uffa4\016\uffa4\024\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\001\002" +
    "\000\046\004\112\013\uffa6\016\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\001" +
    "\002\000\044\013\uffa7\016\uffa7\024\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\001\002" +
    "\000\044\013\uffa5\016\uffa5\024\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\001\002\000" +
    "\006\013\uffd2\025\uffd2\001\002\000\006\013\123\025\124" +
    "\001\002\000\004\047\122\001\002\000\006\013\uffd0\025" +
    "\uffd0\001\002\000\042\013\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002" +
    "\000\024\004\126\007\047\012\045\037\043\040\052\044" +
    "\042\045\051\046\054\047\046\001\002\000\006\013\uffd3" +
    "\025\uffd3\001\002\000\004\047\127\001\002\000\006\013" +
    "\uffd1\025\uffd1\001\002\000\004\013\131\001\002\000\042" +
    "\013\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\001\002\000\010\013\uffcc\024" +
    "\uffcc\025\uffcc\001\002\000\004\004\134\001\002\000\004" +
    "\047\135\001\002\000\004\025\136\001\002\000\022\007" +
    "\047\012\045\037\043\040\052\044\042\045\051\046\054" +
    "\047\046\001\002\000\004\025\140\001\002\000\022\007" +
    "\047\012\045\037\043\040\052\044\042\045\051\046\054" +
    "\047\046\001\002\000\004\025\142\001\002\000\022\007" +
    "\047\012\045\037\043\040\052\044\042\045\051\046\054" +
    "\047\046\001\002\000\004\025\144\001\002\000\022\007" +
    "\047\012\045\037\043\040\052\044\042\045\051\046\054" +
    "\047\046\001\002\000\004\013\146\001\002\000\004\024" +
    "\147\001\002\000\026\003\uffba\005\uffba\010\uffba\011\uffba" +
    "\015\uffba\017\uffba\022\uffba\023\uffba\026\uffba\047\uffba\001" +
    "\002\000\012\002\uffe2\003\uffe2\006\uffe2\026\uffe2\001\002" +
    "\000\012\002\uffa2\003\uffa2\006\uffa2\026\uffa2\001\002\000" +
    "\026\003\uffb9\005\uffb9\010\uffb9\011\uffb9\015\uffb9\017\uffb9" +
    "\022\uffb9\023\uffb9\026\uffb9\047\uffb9\001\002\000\022\007" +
    "\047\012\045\037\043\040\052\044\042\045\051\046\054" +
    "\047\046\001\002\000\004\013\155\001\002\000\004\014" +
    "\156\001\002\000\026\003\035\005\007\010\037\011\025" +
    "\015\uffd7\017\040\022\034\023\033\026\024\047\030\001" +
    "\002\000\004\015\160\001\002\000\026\003\uffc1\005\uffc1" +
    "\010\uffc1\011\uffc1\015\uffc1\017\uffc1\022\uffc1\023\uffc1\026" +
    "\uffc1\047\uffc1\001\002\000\004\026\162\001\002\000\004" +
    "\047\174\001\002\000\022\007\047\012\045\037\043\040" +
    "\052\044\042\045\051\046\054\047\046\001\002\000\004" +
    "\024\165\001\002\000\004\047\166\001\002\000\004\021" +
    "\167\001\002\000\004\013\170\001\002\000\004\014\171" +
    "\001\002\000\026\003\035\005\007\010\037\011\025\015" +
    "\uffd7\017\040\022\034\023\033\026\024\047\030\001\002" +
    "\000\004\015\173\001\002\000\026\003\uffbb\005\uffbb\010" +
    "\uffbb\011\uffbb\015\uffbb\017\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\047\uffbb\001\002\000\006\016\176\024\uffe9\001\002\000" +
    "\004\024\200\001\002\000\022\007\047\012\045\037\043" +
    "\040\052\044\042\045\051\046\054\047\046\001\002\000" +
    "\004\024\uffea\001\002\000\050\002\uffeb\003\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb\017" +
    "\uffeb\022\uffeb\023\uffeb\026\uffeb\037\uffeb\040\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\001\002\000\004\016\205\001" +
    "\002\000\022\007\047\012\045\037\043\040\052\044\042" +
    "\045\051\046\054\047\046\001\002\000\004\024\204\001" +
    "\002\000\026\003\uffa8\005\uffa8\010\uffa8\011\uffa8\015\uffa8" +
    "\017\uffa8\022\uffa8\023\uffa8\026\uffa8\047\uffa8\001\002\000" +
    "\022\007\047\012\045\037\043\040\052\044\042\045\051" +
    "\046\054\047\046\001\002\000\004\024\207\001\002\000" +
    "\026\003\uffa9\005\uffa9\010\uffa9\011\uffa9\015\uffa9\017\uffa9" +
    "\022\uffa9\023\uffa9\026\uffa9\047\uffa9\001\002\000\004\015" +
    "\uffd8\001\002\000\026\003\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\015\uffbf\017\uffbf\022\uffbf\023\uffbf\026\uffbf\047\uffbf\001" +
    "\002\000\004\024\214\001\002\000\026\003\uffbd\005\uffbd" +
    "\010\uffbd\011\uffbd\015\uffbd\017\uffbd\022\uffbd\023\uffbd\026" +
    "\uffbd\047\uffbd\001\002\000\026\003\uffbc\005\uffbc\010\uffbc" +
    "\011\uffbc\015\uffbc\017\uffbc\022\uffbc\023\uffbc\026\uffbc\047" +
    "\uffbc\001\002\000\006\004\221\047\220\001\002\000\004" +
    "\044\217\001\002\000\006\004\uffe6\047\uffe6\001\002\000" +
    "\004\024\223\001\002\000\004\044\222\001\002\000\006" +
    "\004\uffe7\047\uffe7\001\002\000\032\002\uffe8\003\uffe8\005" +
    "\uffe8\006\uffe8\010\uffe8\011\uffe8\015\uffe8\017\uffe8\022\uffe8" +
    "\023\uffe8\026\uffe8\047\uffe8\001\002\000\004\014\uffdf\001" +
    "\002\000\014\002\ufff4\003\ufff4\005\ufff4\006\ufff4\026\ufff4" +
    "\001\002\000\010\002\uffe3\006\uffe3\014\uffa2\001\002\000" +
    "\004\015\151\001\002\000\004\013\232\001\002\000\004" +
    "\013\uffa3\001\002\000\004\014\233\001\002\000\026\003" +
    "\035\005\007\010\037\011\025\015\uffd7\017\040\022\034" +
    "\023\033\026\024\047\030\001\002\000\004\015\151\001" +
    "\002\000\004\002\uffd6\001\002\000\004\002\uffd5\001\002" +
    "\000\004\002\ufffd\001\002\000\014\002\ufff6\003\ufff6\005" +
    "\ufff6\006\ufff6\026\ufff6\001\002\000\006\002\ufffb\006\020" +
    "\001\002\000\004\002\ufffe\001\002\000\004\015\226\001" +
    "\002\000\004\002\uffff\001\002\000\004\047\247\001\002" +
    "\000\006\002\uffe5\006\uffe5\001\002\000\004\012\251\001" +
    "\002\000\004\014\uffe0\001\002\000\006\013\252\026\253" +
    "\001\002\000\004\014\uffdd\001\002\000\006\004\216\047" +
    "\266\001\002\000\004\047\265\001\002\000\006\013\256" +
    "\025\257\001\002\000\004\014\uffde\001\002\000\004\026" +
    "\260\001\002\000\006\004\216\047\263\001\002\000\004" +
    "\047\262\001\002\000\006\013\uffdb\025\uffdb\001\002\000" +
    "\006\013\uffdc\025\uffdc\001\002\000\006\004\221\047\uffe1" +
    "\001\002\000\006\013\uffd9\025\uffd9\001\002\000\006\013" +
    "\uffda\025\uffda\001\002\000\004\047\270\001\002\000\004" +
    "\016\271\001\002\000\014\037\273\040\272\044\276\045" +
    "\275\046\274\001\002\000\004\044\304\001\002\000\004" +
    "\044\302\001\002\000\004\024\301\001\002\000\004\024" +
    "\300\001\002\000\004\024\277\001\002\000\032\002\ufff0" +
    "\003\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\015\ufff0\017" +
    "\ufff0\022\ufff0\023\ufff0\026\ufff0\047\ufff0\001\002\000\032" +
    "\002\uffed\003\uffed\005\uffed\006\uffed\010\uffed\011\uffed\015" +
    "\uffed\017\uffed\022\uffed\023\uffed\026\uffed\047\uffed\001\002" +
    "\000\032\002\uffec\003\uffec\005\uffec\006\uffec\010\uffec\011" +
    "\uffec\015\uffec\017\uffec\022\uffec\023\uffec\026\uffec\047\uffec" +
    "\001\002\000\004\024\303\001\002\000\032\002\uffef\003" +
    "\uffef\005\uffef\006\uffef\010\uffef\011\uffef\015\uffef\017\uffef" +
    "\022\uffef\023\uffef\026\uffef\047\uffef\001\002\000\004\024" +
    "\305\001\002\000\032\002\uffee\003\uffee\005\uffee\006\uffee" +
    "\010\uffee\011\uffee\015\uffee\017\uffee\022\uffee\023\uffee\026" +
    "\uffee\047\uffee\001\002\000\010\012\251\016\176\024\uffe9" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\024\004\011\005\015\007\014\010\012\011\007" +
    "\012\013\013\016\015\010\021\021\001\001\000\004\014" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\245\015\010\021\021\001\001\000\022\005\240\007" +
    "\241\010\237\011\007\012\013\013\016\015\010\021\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\236\001\001\000\002\001\001\000\004" +
    "\033\227\001\001\000\004\034\223\001\001\000\002\001" +
    "\001\000\022\010\030\011\007\012\013\013\016\016\035" +
    "\023\025\027\026\032\031\001\001\000\004\014\214\001" +
    "\001\000\010\023\043\024\052\025\211\001\001\000\002" +
    "\001\001\000\022\010\030\011\007\012\013\013\016\016" +
    "\207\023\025\027\026\032\031\001\001\000\004\031\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\043\024\052\025\047\001\001\000\002\001\001\000\010" +
    "\023\043\024\052\025\131\001\001\000\002\001\001\000" +
    "\010\023\043\024\052\025\127\001\001\000\004\031\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\043\024\052\025\073\001\001\000\004" +
    "\026\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\043\024\052\025\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\030\011\007\012\013\013" +
    "\016\016\076\023\025\027\026\032\031\001\001\000\002" +
    "\001\001\000\004\030\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\030\011\007\012\013\013\016" +
    "\016\103\023\025\027\026\032\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\117\023\043\024\052\025\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\115\001\001" +
    "\000\004\031\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\043\024" +
    "\052\025\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\043\024\052\025\136\001\001\000" +
    "\002\001\001\000\010\023\043\024\052\025\140\001\001" +
    "\000\002\001\001\000\010\023\043\024\052\025\142\001" +
    "\001\000\002\001\001\000\010\023\043\024\052\025\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\043\024\052\025\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\030\011\007\012\013" +
    "\013\016\016\156\023\025\027\026\032\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\162\001\001" +
    "\000\002\001\001\000\010\023\043\024\052\025\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\030\011" +
    "\007\012\013\013\016\016\171\023\025\027\026\032\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\174\001\001\000\002\001\001\000\010\023\043\024\052" +
    "\025\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\043\024\052\025\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\043\024" +
    "\052\025\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\030\011\007\012\013\013\016\016\233\023" +
    "\025\027\026\032\031\001\001\000\004\034\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\243\001\001\000\002\001\001" +
    "\000\004\034\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\247\001\001\000\002" +
    "\001\001\000\006\006\253\017\254\001\001\000\002\001" +
    "\001\000\004\014\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\260\001\001\000" +
    "\004\014\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\247\035\174\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private static SymbolTable st;
    public void setSymbolTable(SymbolTable st) {
      this.st = st;
    }

    private static ErrorHandler eh;
    public void setErrorHandler(ErrorHandler eh) {
      this.eh = eh;
    }

    private static ThreeAddressCode tac;
    public void setThreeAddressCode(ThreeAddressCode tac) {
      this.tac = tac;
    }

    private int getLeft(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.left;
    }

    private int getRight(){
        Symbol lastSymbol = (Symbol)this.stack.peek();
        return lastSymbol.right;
    }

    @Override
    public void report_error(String message, Object info) {
    }

    @Override
    public void report_fatal_error(String message, Object info) {
    }

    @Override
    public void syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PictoProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_PictoProgram start_val = (_PictoProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SetUp ::= 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SetUp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PictoProgram ::= SetUp GlobalDeclarations Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, functions, mainFunction, 0, 0); 
                                                                                                                        if(eh.isErrorFree()){RESULT.generate();}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PictoProgram ::= SetUp GlobalDeclarations MainFunction 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(globalDeclarations, null, mainFunction, 0, 0); 
                                                                                                                        if(eh.isErrorFree()){RESULT.generate();}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PictoProgram ::= SetUp Functions MainFunction 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, functions, mainFunction, 0, 0); 
                                                                                                                        if(eh.isErrorFree()){RESULT.generate();}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PictoProgram ::= SetUp MainFunction 
            {
              _PictoProgram RESULT =null;
		int mainFunctionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainFunctionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_MainFunction mainFunction = (_MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _PictoProgram(null, null, mainFunction, 0, 0); 
                                                                                                                        if(eh.isErrorFree()){RESULT.generate();}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PictoProgram ::= SetUp GlobalDeclarations Functions 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PictoProgram ::= SetUp GlobalDeclarations 
            {
              _PictoProgram RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PictoProgram ::= SetUp Functions 
            {
              _PictoProgram RESULT =null;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		eh.addError(ErrorPhase.Sintactic, "Missing 'main' function. The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PictoProgram ::= SetUp 
            {
              _PictoProgram RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "The file must follow the order: global definitions (optional), functions (optional), and main (mandatory).", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PictoProgram ::= SetUp error 
            {
              _PictoProgram RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Too many errors were found", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PictoProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDeclarations ::= GlobalDeclarations Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int globalDeclarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int globalDeclarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_GlobalDeclarations globalDeclarations = (_GlobalDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, globalDeclarations, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDeclarations ::= Declaration 
            {
              _GlobalDeclarations RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _GlobalDeclarations(declaration, null, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalDeclarations ::= error Endline 
            {
              _GlobalDeclarations RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong global declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declaration ::= ConstDelcaration 
            {
              _Declaration RESULT =null;
		int constDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ConstDeclaration constDeclaration = (_ConstDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(constDeclaration, constDeclarationleft, constDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declaration ::= VarDeclaration 
            {
              _Declaration RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(varDeclaration, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declaration ::= ArrDeclaration 
            {
              _Declaration RESULT =null;
		int arrDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_ArrDeclaration arrDeclaration = (_ArrDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Declaration(arrDeclaration, arrDeclarationleft, arrDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDelcaration ::= Const Type Id Assign Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDelcaration ::= Const Type Id Assign SUM Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDelcaration ::= Const Type Id Assign SUB Decimal Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, opArit, decimal, typeleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDelcaration ::= Const Type Id Assign BooleanValue Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, booleanValue, typeleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstDelcaration ::= Const Type Id Assign Character Endline 
            {
              _ConstDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ConstDeclaration(type, id, character, typeleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDelcaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclaration ::= Type Id AssignationPart Endline 
            {
              _VarDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int assignationPartleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignationPartright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_AssignationPart assignationPart = (_AssignationPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _VarDeclaration(type, id, assignationPart, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AssignationPart ::= Assign Expression 
            {
              _AssignationPart RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _AssignationPart(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignationPart ::= 
            {
              _AssignationPart RESULT =null;
		 /* Pere. No hay asignación */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignationPart",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArrDeclaration ::= Type DimentionSizes Id Endline 
            {
              _ArrDeclaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _ArrDeclaration(type, dimentionSizes, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DimentionSizes ::= DimentionSizes ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(dimentionSizes, decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DimentionSizes ::= ArrayIcon Decimal 
            {
              _DimentionSizes RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _DimentionSizes(null, decimal, decimalleft, decimalright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DimentionSizes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Functions ::= Function Functions 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Functions functions = (_Functions)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, functions, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Functions ::= Function 
            {
              _Functions RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Function function = (_Function)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Functions(function, null, functionleft, functionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Functions ::= error Rbracket 
            {
              _Functions RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong function declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Function ::= FunctionHead Lbracket FunctionBody F_OUT 
            {
              _Function RESULT =null;
		int functionHeadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionHeadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionHead functionHead = (_FunctionHead)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Function(functionHead, functionBody, functionHeadleft, functionHeadright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeDimentions ::= Type DimentionSizes 
            {
              _TypeDimentions RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimentionSizesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimentionSizesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_DimentionSizes dimentionSizes = (_DimentionSizes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _TypeDimentions(dimentionSizes, type, typeleft, dimentionSizesright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDimentions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunctionHead ::= Type Id FunctionArgs 
            {
              _FunctionHead RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionArgs functionArgs = (_FunctionArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionHead(type, id, functionArgs, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionHead",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunctionHead ::= error F_OUT 
            {
              _FunctionHead RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Error defining a function", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionHead",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunctionArgs ::= Lparen FunctionArgsList Rparen 
            {
              _FunctionArgs RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionArgs(functionArgsList, functionArgsListleft, functionArgsListright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionArgs ::= Lparen Rparen 
            {
              _FunctionArgs RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgs",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionArgsList ::= FunctionArgsList Comma Type Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunctionArgsList ::= FunctionArgsList Comma TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int functionArgsListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int functionArgsListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunctionArgsList functionArgsList = (_FunctionArgsList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(functionArgsList, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionArgsList ::= Type Id 
            {
              _FunctionArgsList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, type, id, typeleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionArgsList ::= TypeDimentions Id 
            {
              _FunctionArgsList RESULT =null;
		int typeDimentionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeDimentionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_TypeDimentions typeDimentions = (_TypeDimentions)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionArgsList(null, typeDimentions, id, typeDimentionsleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionArgsList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FunctionBody ::= Instruction FunctionBody 
            {
              _FunctionBody RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Instruction instruction = (_Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunctionBody(instruction, functionBody, instructionleft, instructionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionBody ::= 
            {
              _FunctionBody RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionBody",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MainFunction ::= Main F_IN Rparen Lbracket FunctionBody F_OUT 
            {
              _MainFunction RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _MainFunction(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MainFunction ::= Main error F_OUT 
            {
              _MainFunction RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());eh.addError(ErrorPhase.Sintactic, "Wrong Main function declaration", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionCall ::= Id Lparen FunCallArgs Rparen 
            {
              _FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _FunctionCall(id, funCallArgs, idleft, funCallArgsright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FunCallArgs ::= FunCallArgs Comma Expression 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FunCallArgs ::= Expression 
            {
              _FunCallArgs RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FunCallArgs ::= FunCallArgs Comma ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int funCallArgsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funCallArgsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_FunCallArgs funCallArgs = (_FunCallArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(funCallArgs, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunCallArgs ::= ArrayIcon Id 
            {
              _FunCallArgs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _FunCallArgs(null, id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunCallArgs ::= 
            {
              _FunCallArgs RESULT =null;
		 /* Pere. asegurar que no devuelve nada */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCallArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Value 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, valueleft, valueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= SUB Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= SUM Expression 
            {
              _Expression RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(expression, opArit, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= Value Operation Expression 
            {
              _Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Value value = (_Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Operation operation = (_Operation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Expression(value, operation, expression, valueleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Value ::= FunctionCall 
            {
              _Value RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Value ::= Lparen Expression Rparen 
            {
              _Value RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Value(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Value ::= Decimal 
            {
              _Value RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(decimal, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Value ::= BooleanValue 
            {
              _Value RESULT =null;
		int booleanValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int booleanValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean booleanValue = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(booleanValue, booleanValueleft, booleanValueright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Value ::= Character 
            {
              _Value RESULT =null;
		int characterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char character = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(character, characterleft, characterright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Value ::= Id 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Value ::= Id Index 
            {
              _Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Value(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Value ::= Read Lparen Rparen 
            {
              _Value RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object read = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Value(readleft, readright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Instruction ::= Opif Lparen Expression Rparen Lbracket FunctionBody Rbracket Else 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Else _else = (_Else)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(expression, functionBody, _else, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instruction ::= Opwhile Lparen Expression Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, functionBody, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= Declaration 
            {
              _Instruction RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Declaration declaration = (_Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(declaration, declarationleft, declarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= FunctionCall Endline 
            {
              _Instruction RESULT =null;
		int functionCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionCall functionCall = (_FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(functionCall, functionCallleft, functionCallright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= Assignation 
            {
              _Instruction RESULT =null;
		int assignationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Assignation assignation = (_Assignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Instruction(assignation, assignationleft, assignationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= Return Endline 
            {
              _Instruction RESULT =null;
		RESULT = new _Instruction();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= Return Expression Endline 
            {
              _Instruction RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(expression, expressionleft, expressionright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= Opfor Lparen VarDeclaration Expression Endline Id Opinc Rparen Lbracket FunctionBody Rbracket 
            {
              _Instruction RESULT =null;
		int varDeclarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int varDeclarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_VarDeclaration varDeclaration = (_VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Instruction(varDeclaration, expression, id, functionBody, varDeclarationleft, varDeclarationright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= Write Lparen ArrayIcon Id Comma Expression Comma Expression Comma Expression Comma Expression Rparen Endline 
            {
              _Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expression1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expression1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		_Expression expression1 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expression2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expression2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		_Expression expression2 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expression3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expression3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		_Expression expression3 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expression4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		_Expression expression4 = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new _Instruction(id, expression1, expression2, expression3, expression4, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruction ::= error Endline 
            {
              _Instruction RESULT =null;
		eh.addError(ErrorPhase.Sintactic, "Error defining a instruction", getLeft(), getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Operation ::= SUM 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Operation ::= SUB 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Operation ::= MUL 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Operation ::= DIV 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operation ::= MOD 
            {
              _Operation RESULT =null;
		int opAritleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opAritright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpArit opArit = (OpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opArit, opAritleft, opAritright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operation ::= EQ 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operation ::= NE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operation ::= GE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Operation ::= LE 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Operation ::= GT 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Operation ::= LT 
            {
              _Operation RESULT =null;
		int opCompleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opCompright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpComp opComp = (OpComp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opComp, opCompleft, opCompright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Operation ::= AND 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Operation ::= OR 
            {
              _Operation RESULT =null;
		int opLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		OpLog opLog = (OpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Operation(opLog, opLogleft, opLogright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operation",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Else ::= Opelse Lbracket FunctionBody Rbracket 
            {
              _Else RESULT =null;
		int functionBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int functionBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_FunctionBody functionBody = (_FunctionBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Else(functionBody, functionBodyleft, functionBodyright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Else ::= 
            {
              _Else RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Assignation ::= Id Index Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, index, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Assignation ::= Id Assign Expression Endline 
            {
              _Assignation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		_Expression expression = (_Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new _Assignation(id, expression, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignation",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Index ::= ArrayIcon Decimal Index 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, index, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Index ::= ArrayIcon Decimal 
            {
              _Index RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int decimal = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(decimal, null, decimalleft, decimalright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Index ::= ArrayIcon Id Index 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		_Index index = (_Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, index, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Index ::= ArrayIcon Id 
            {
              _Index RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new _Index(id, null, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Index",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F_IN ::= Lparen 
            {
              Object RESULT =null;
		st.enterBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_IN",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F_OUT ::= Rbracket 
            {
              Object RESULT =null;
		st.exitBlock();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_OUT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
